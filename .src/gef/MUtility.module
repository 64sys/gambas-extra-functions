' Gambas module file

' Gambas extra functions
' Compilation of utilities and functions developed by the gambas comunity.
'
' Copyright (C) Martín Belmonte.
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Public Function DirParent(strPath As String) As String  ''Devuelve el directorio padre de otro que se pasa como parámetro.

  Dim strParent As String
  Dim intLast As Integer

  If strPath <> "" Then
    intLast = String.RInStr(strPath, "/")
    strParent = String.Mid(strPath, 1, intLast)
    If String.Len(strParent) > 1 Then
      If String.Right(strParent) = "/" Then
        strParent = String.Mid(strParent, 1, String.Len(strParent) - 1)

      Endif
    Endif
  Endif

  If Exist(strParent) = False Then
    strParent = "-1"
  Else
    If Stat(strParent).Type <> gb.Directory Then
      strParent = "-1"
    Endif
  Endif

  Return strParent

End

Public Function FilesNew(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[] '' Devuelve una lista de archivos de un directorio que se pasa como parametro. Opcionalmente se puede pasar como parametro una lista de archivos existentes los cuales seran omitidos de la lista de salida si es que son encontrados y un filtro de extensiones de archivo de l estilo mp3:ods:txt

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesNew As New String[] ' Archivos del directorio que existen en BBDD

  stxFiles = MUtility.ScanFolder(strDirectory, strFilterOpt)

  'Para cada archivo verificar si este existe en la base de datos
  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFiles.Max
      If stxFilesOpt.Find(stxFiles[intFile]) = -1 Then
        stxFilesNew.Add(stxFiles[intFile])
      Endif
    Next
  Else ' Todos los archivos que se encuentren seran nuevos
    stxFilesNew = stxFiles
  Endif

  Return stxFilesNew

End

Public Function FilesExist(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[] '' Devuelve una lista de archivos de un directorio que coinciden con los de la lista que se le pasa como parametro, es decir verifica que existen. Opcionalmente se le puede pasar un parametro de filtro de extensiones para acotar la busqueda.

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesExist As New String[] ' Archivos del directorio que existen en BBDD

  stxFiles = MUtility.ScanFolder(strDirectory, strFilterOpt)

  'Para cada archivo verificar si este existe en la base de datos
  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFiles.Max
      If stxFilesOpt.Find(stxFiles[intFile]) > -1 Then
        stxFilesExist.Add(stxFiles[intFile])
      Endif
    Next
  Else
    stxFilesExist.Clear
  Endif

  Return stxFilesExist

End

Public Function FilesNone(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[] '' Devuelve una lista de archivos que no existen en el directorio, es necesario parar una lista de archivos para contrastar.

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesNone As New String[] ' Archivos del directorio que existen en BBDD

  stxFiles = MUtility.ScanFolder(strDirectory, strFilterOpt)

  'Para cada archivo verificar si este existe en la base de datos
  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFilesOpt.Max
      If stxFiles.Find(stxFilesOpt[intFile]) = -1 Then
        stxFilesNone.Add(stxFilesOpt[intFile])
      Endif
    Next
  Else
    stxFilesNone.Clear
  Endif

  Return stxFilesNone

End

Public Function FilesList(strPath As String) As String[] '' Devuelve una lista de archivos.

  Dim strPathsTmp As String
  Dim stxPaths As New String[]
  'Dim intP As Integer

  strPathsTmp = Replace(strPath, "\n", "")
  strPathsTmp = Replace(strPathsTmp, "\r", "")
  If String.Mid(strPath, 1, 7) = "file://" Then
    strPathsTmp = Right$(strPathsTmp, -7)  ' Quitando el primer "file://"
  Endif

  strPathsTmp = Replace(strPathsTmp, "file://", "\n") ' Este es por si existen mas de un archivo

  strPathsTmp = Replace(strPathsTmp, "\x00", "") 'un caracter que da problemas

  If InStr(strPathsTmp, "\n") Then
    stxPaths = Split(strPathsTmp, "\n")
  Else
    stxPaths.Add(strPathsTmp)
  Endif

  ' For intP = 0 To stxPaths.Max
  '   stxPaths[intP] = MUtility.ConvertPath(stxPaths[intP])
  ' Next

  Return stxPaths

End

Public Function FileNospace(stxParam As String[], Optional strDelim As String, Optional strExt As String) As String ''Devuelve un texto, nombre de arcivo concatenando todos los fragmentos que se le pase y pone todo en minusculas quita los caracteres fuera del rango 97-122 de ascci.

  Dim intPar As Integer
  Dim strTemp As String
  Dim intLeter As Integer
  Dim strLeter As String
  Dim strOutTmp As String
  Dim stxOutput As New String[]
  Dim strOutput As String

  If strDelim = "" Then
    strDelim = "#"
  Endif

  If strExt <> "" Then
    strExt = String.LCase(strExt)
    If InStr(strExt, ".") Then
      strExt = Replace(strExt, ".", "")
    Else
      strExt = "." & strExt
    Endif
  Endif

  If stxParam.Count > 0 Then
    For intPar = 0 To stxParam.Max

      strTemp = stxParam[intPar]
      strTemp = String.LCase(strTemp)
      strTemp = String.RemoveDiacritics(strTemp)
      strTemp = Replace(strTemp, "  ", Chr(45))
      strTemp = Replace(strTemp, "_", Chr(45))
      strTemp = Replace(strTemp, "--", Chr(45))
      strOutTmp = ""
      For intLeter = 1 To String.Len(strTemp)
        strLeter = String.Mid(strTemp, intLeter, 1)
        Select Asc(strLeter)
          Case Chr(32), Chr(45) ' Espacio o Gión
            strOutTmp &= "-"
          Case Else
            If Asc(strLeter) > 96 And Asc(strLeter) < 123 Then
              strOutTmp &= strLeter
            Endif
        End Select
      Next
      stxOutput.Add(strOutTmp)
    Next
  Endif

  strOutput = stxOutput.Join(strDelim) & strExt

  Return strOutput

End

Public Function FileVersion(strInputPath As String) As String ''Devuelve un texto con la versión del archivo que se le pasa como ruta. Usa el comando file de la terminal.

  Dim strVersion As String

  If InStr(strInputPath, "'") Then
    strInputPath = Replace(strInputPath, "'", "'\\''")
  Endif

  Shell "file '" & strInputPath & "'" To strVersion

  If InStr(strVersion, ":") <> 0 Then
    strVersion = Replace(strVersion, ": ", ":")
    strVersion = Split(strVersion, ":")[1]
    strVersion = ArrangePath(strVersion)
  Endif

  Return strVersion

End

Public Function FileLoad(strPath As String) As String[] '' Devuelve una matriz de texto con los valores listados en un archivo de texto desl cual se pasa su ruta como parametro.

  Dim strList As String
  Dim stxListTmp As New String[]
  Dim stxList As New String[]
  Dim intList As Integer

  stxList.Clear

  If Exist(strPath) Then

    strList = File.Load(strPath)

    If InStr(strList, "\n") > -1 Then
      stxListTmp = Split(strList, "\n")
    Else
      If String.Len(strList) > 0 Then
        stxListTmp.Add(strList)
      Endif
    Endif

    For intList = 0 To stxListTmp.Max
      If stxListTmp[intList] <> "" Then
        stxList.Add(stxListTmp[intList])
      Endif
    Next
  Endif

  Return stxList

End

Public Function FileTemplate(strFileSeed As String, strFileProduct As String, stxTag As String[], stxDat As String[]) As String[] '' Tomando un archivo template reemplaza las etiquetas por valores. Retorna una matriz con una lista de archivos, primero el producto y luego el pdf, en cas que alguno de estos no exista en la posicion de la matriz hara una cadena vacia.

  Dim strTextProduct As String
  Dim intN As Integer
  Dim strFilePdf As String
  Dim prsTemp As Process
  Dim stxFilesOutput As String[]

  strFilePdf = File.Dir(strFileProduct) &/ File.BaseName(strFileProduct) & ".pdf"

  If Exist(strFileSeed) = True Then
    strTextProduct = File.Load(strFileSeed)

    If strTextProduct <> "" Then
      For intN = 0 To stxTag.Max

        strTextProduct = Replace(strTextProduct, stxTag[intN], stxDat[intN])

      Next

      File.Save(strFileProduct, strTextProduct)
      Wait 0.1

      prsTemp = Shell "dia " & strFileProduct & " -e " & strFilePdf
      While prsTemp.State = prsTemp.Running
        Wait 0.1
      Wend

    Endif

  Endif

  If Exist(strFileProduct) = True Then
    stxFilesOutput.Add(strFileProduct)
  Else
    stxFilesOutput.Add("")
  Endif

  If Exist(strFilePdf) = True Then
    stxFilesOutput.Add(strFilePdf)
  Else
    stxFilesOutput.Add("")
  Endif

  Return stxFilesOutput

End

Public Function FileReplace(strFileName As String, strSearch As String, strReplace As String) As Boolean '' Busca una cadena de texto en un archivo de entrada y la reemplaza por otra y luego pone todo en un archivo de salida. Archivos en modo input
  '----------------------------------------------------------------------
  'Creado por TercoIDE y formateado por Tincho
  'https://www.gambas-es.org/viewtopic.php?f=5&t=6056&start=10
  '----------------------------------------------------------------------

  Dim f As File
  Dim strFileOut As String
  Dim a As String
  Dim fo As File
  Dim b As String

  strFileOut = Mid$(strFileName, 1, Len(strFileName) - 3) & "tmp"

  Try Kill strFileOut

  f = Open strFileName For Input

  fo = Open strFileOut For Create

  Do
    Line Input #f, a
    '    Stop
    b = Replace(a, strSearch, strReplace)

    Write #fo, b & Chr$(13) & Chr$(10)
  Loop Until Eof(f)
  Close f
  Close fo

  Try Kill strFileName
  Try Move strFileOut To strFileName

  Return True

Catch
  Try Close f
  Try Close fo
  Return False

End Function

Public Function GetForeignKey(strValue As String, conRef As Connection, strTable As String, strFieldKey As String, strFieldName As String) As Integer '' Devuelve la clave del registro referenciado en otra tabla

  Dim intKey As Integer
  Dim strSQLForeign As String
  Dim resFeoreign As Result
  Dim stxForeignKey As New String[]
  Dim stxForeignName As New String[]
  Dim intCounter As Integer
  Dim resInsert As Result

  intKey = -1
  intCounter = 0

  Repeat

    stxForeignKey.Clear
    stxForeignName.Clear

    strSQLForeign = "select " & strFieldKey & ", " & strFieldName & " from " & strTable

    resFeoreign = conRef.Exec(strSQLForeign)

    While resFeoreign.Available

      stxForeignKey.Add(resFeoreign[strFieldKey])
      stxForeignName.Add(resFeoreign[strFieldName])

      If strValue = resFeoreign[strFieldName] Then
        intKey = resFeoreign[strFieldKey]
        Break
      Endif

      resFeoreign.MoveNext

    Wend

    If intKey = -1 Then ' Quiere decir que ese nombre no esta en la tabla de referencia, entonces hay que insertarlo

      resInsert = conRef.Create(strTable)

      resInsert[strFieldName] = strValue

      resInsert.update

    Endif

  Until intKey <> -1

  Return intKey

End

Public Function Chek4SQL(strInput As String) As String ''Devuelve un texto apto para consulatas SQL, quita los saltos del línea y los caracteres no compatibles con sentencias SQL.

  Dim strOutput As String

  strOutput = Replace(strInput, "\n", "")
  strOutput = Replace(strOutput, "\r", "")
  strOutput = Replace(strOutput, "\x00", "")
  strOutput = Replace(strOutput, Chr(39), Chr(46)) ' ' > .
  strOutput = Replace(strOutput, Chr(44), Chr(46)) ' , > .

  Return strOutput

End

Public Function ArrangePath(strPathRaw As String) As String ''Devuelve una ruta sin los saltos del línea ni caracteres problemáticos

  Dim strPath As String

  strPath = Replace(strPathRaw, "\n", "")
  strPath = Replace(strPath, "\r", "")
  strPath = Replace(strPath, "\x00", "")

  Return strPath

End

Public Function CRC32(stInputPath As String, Optional strCase As String) As String '' Obtencion del crc32 de un archivo del que se pasa como parametro la ruta completa, como parametro opcional strCase puede ser U o L que parara todo a Ucase o Lcase.

  Dim strCrc32 As String

  Shell "crc32 '" & stInputPath & "'" To strCrc32

  strCrc32 = String.Mid(strCrc32, 1, 8) ' Corte de 8 caracters para quitar el \n y demas carcteres si se produjeran

  Select strCase
    Case "U", "u", ""
      strCrc32 = String.UCase(strCrc32)
    Case "L", "l"
      strCrc32 = String.LCase(strCrc32)
  End Select

  Return strCrc32

End

Public Function ExifPages(strPath As String) As Integer '' Devuelve la cantidad de páginas del archivo si no tiene el tag entonces se devuelve 1. Para la extraccion de esta informacion se usa ExifTool.

  Dim strExifBruto As String
  Dim stxExifBruto As New String[]
  Dim intLin As Integer
  Dim intCur As Integer
  Dim intLen As Integer

  Dim intPages As Integer

  strPath = ArrangePath(strPath)

  Shell "exiftool -f -s -s '" & strPath & "' 2>&1" To strExifBruto ' Toma todos los tags del archivo

  stxExifBruto = Split(strExifBruto, "\n")

  For intLin = 0 To stxExifBruto.Max

    If stxExifBruto[intLin] <> "" Then
      intCur = InStr(stxExifBruto[intLin], ": ")
      intLen = String.Len(stxExifBruto[intLin])

      If String.Mid(stxExifBruto[intLin], 1, intCur - 1) = "PageCount" Then
        intPages = CInt(String.Mid(stxExifBruto[intLin], intCur + 2, intLen - intCur - 1))
        Break
      Else
        intPages = 1
      Endif

    Endif
  Next
  Return intPages

End

Public Function ExifRaw(strPath As String) As String[] '' Devuelve una matriz con los metadatos extraídos por el programa de la terminal ExifTool.

  Dim strExifBruto As String
  Dim stxExifBruto As New String[]
  Dim intLin As Integer
  Dim intCur As Integer
  Dim intLen As Integer
  Dim strExifTag As String ' Nombre de la etiqueta exif
  Dim strExifVal As String ' Valor de la etiquieta
  Dim strExif As String
  Dim stxExif As New String[]

  Shell "exiftool -f -s -s '" & strPath & "' 2>&1" To strExifBruto ' Toma todos los tags del archivo

  stxExifBruto = Split(strExifBruto, "\n")

  For intLin = 0 To stxExifBruto.Max

    If stxExifBruto[intLin] <> "" Then
      intCur = InStr(stxExifBruto[intLin], ": ")
      intLen = String.Len(stxExifBruto[intLin])

      strExifTag = String.Mid(stxExifBruto[intLin], 1, intCur - 1)

      strExifVal = String.Mid(stxExifBruto[intLin], intCur + 2, intLen - intCur - 1)

      strExif = strExifTag & "\t" & strExifVal

      stxExif.Add(strExif)

    Endif
  Next
  Return stxExif

End

Public Function Timestamp(datTime As Date) As String '' Retorna una cadena de texto con el tiempo en formato "yyyymmddhhnnss".

  Return Format(datTime, "yyyymmddhhnnss")

End

Public Function TypeVar(intType As Integer) As String '' Función que devuelve el tipo de variable como una palabra. Como parametro de entrada requiere un numero entero.

  Dim vrxType As String[]

  vrxType = ["Null", "Boolean", "Byte", "Short", "Integer", "Long", "Single", "Float", "Date", "String", "Variant", "Object", "Pointer", "Function", "Class"]

  Return vrxType[intType]

End

Public Function Capital(strInput As String) As String ''Devuelve un texto con la primera letra en mayusculas y todas las siguientes en minúsculas.

  Dim strOutput As String

  If strInput <> "" Then

    strOutput = String.UCase(String.Mid(strInput, 1, 1))
    strOutput &= String.LCase(String.Mid(strInput, 2, String.len(strInput) - 1))

  Else
    strOutput = ""
  Endif

  Return strOutput

End

Public Function OnlyChar(strInput As String) As String ''Devuelve un texto con sus caracteres.

  Dim strOutput As String

  If strInput <> "" Then

    strOutput = String.UCase(String.Mid(strInput, 1, 1))
    strOutput &= String.LCase(String.Mid(strInput, 2, String.len(strInput) - 1))

  Else
    strOutput = ""
  Endif

  Return strOutput

End

Public Function MouseButton(intKey As Integer) As String '' Funcion que retorna el nombre en ingés del boton del ratón que se ha presionado.

  Dim strMouseButton As String

  Select intKey
    Case 1
      strMouseButton = "Left"
    Case 2
      strMouseButton = "Right"
    Case 4
      strMouseButton = "Center"
    Case 16
      strMouseButton = "Function-1"
    Case 8
      strMouseButton = "Function-2"
  End Select

  Return strMouseButton

End

Public Function ArrayInclude(stxList As String[], strFind As String) As String[] ''Quita de la lista los textos que no tengan la cadena de texto pasada como parametro

  Dim strItem As String
  Dim stxAuxiliar As New String[]

  stxAuxiliar.Clear

  For Each strItem In stxList
    If InStr(strItem, strFind) <> 0 Then

      stxAuxiliar.Add(strItem)

    Endif

  Next

  Return stxAuxiliar

End

Public Function ArrayExclude(stxList As String[], strFind As String) As String[] ''Quita de la lista los textos que tengan la cadena de texto pasada como parametro

  Dim strItem As String
  Dim stxAuxiliar As New String[]

  stxAuxiliar.Clear

  For Each strItem In stxList
    If InStr(strItem, strFind) = 0 Then

      stxAuxiliar.Add(strItem)

    Endif

  Next

  Return stxAuxiliar

End

Public Function FileInfo(strFilePath As String) As String[] ''Devuelve una matriz con datos del archivo que se le pasa como ruta.

  Dim stxFileMeta As New String[]
  Dim strFileDir As String
  Dim strFileName As String
  Dim strFileExt As String
  Dim strFileBase As String
  Dim strFileSize As String
  Dim strFileTime As String
  '  Dim strFileCRC32 As String
  Dim strFileVersion As String
  Dim strSep As String

  strFilePath = ArrangePath(strFilePath)
  strSep = "\t"

  If Stat(strFilePath).Type = gb.File Then
    ' Informacion básica para todo tipo de archivo

    stxFileMeta.Add("FilePath" & strSep & strFilePath)

    strFileDir = File.Dir(strFilePath)
    stxFileMeta.Add("FileDirectory" & strSep & strFileDir)

    strFileName = File.Name(strFilePath)
    stxFileMeta.Add("FileName" & strSep & strFileName)

    strFileExt = File.Ext(strFilePath)
    stxFileMeta.Add("FileExt" & strSep & strFileExt)

    strFileBase = File.BaseName(strFilePath)
    stxFileMeta.Add("FileBase" & strSep & strFileBase)

    strFileSize = Stat(strFilePath).Size
    stxFileMeta.Add("FileSize" & strSep & strFileSize)

    strFileTime = MUtility.Timestamp(Stat(strFilePath).Time)
    strFileTime = Replace(strFileTime, ":", ".")
    stxFileMeta.Add("FileTime" & strSep & strFileTime)

    ' strFileCRC32 = Mutility.CRC32(strFilePath)
    ' stxFileMeta.Add("FileCRC32" & strSep & strFileCRC32)

    strFileVersion = Mutility.FileVersion(strFilePath)
    strFileVersion = Replace(strFileVersion, ":", ".")
    stxFileMeta.Add("FileVersion" & strSep & strFileVersion)

  Endif

  Return stxFileMeta

End

Public Function ConvertPath(strInput As String) As String '' Descodifica los caracteres hexadecimales en las URI's recorriendo la cadena dada Params: strInput la URintPos a descodificar Return: la URintPos descodificada
  '----------------------------------------------------------------------
  'http://www.gambas-es.org/viewtopic.php?f=1&t=2054&postdays=0&postorder=asc&start=10
  '----------------------------------------------------------------------
  '

  Dim intLen As Integer
  Dim intPos As Integer
  Dim strChar As String
  Dim strDigits As String
  Dim strOutput As String

  strOutput = ""
  intLen = Len(strInput)
  intPos = 1
  Do While intPos <= intLen
    ' Examinar el siguiente caracter
    strChar = Mid$(strInput, intPos, 1)
    If strChar = "+" Then
      ' Convertir a espacio
      ' strOutput = strOutput & " " ' Lo anule porque se carga los directorios con signo +
      strOutput = strOutput & strChar
    Else If strChar <> "%" Then
      ' Normal, no cambiar
      strOutput = strOutput & strChar
    Else If intPos > intLen - 2 Then
      strOutput = strOutput & strChar
    Else
      ' Obtener los siguientes caracteres hex.
      strDigits = Mid$(strInput, intPos + 1, 2)
      ' Debug strDigits
      ' aquí convertimos el valor hexadecimal a entero y
      ' se lo pasamos a Chr que devuelve el carácter correcto.
      strOutput = strOutput & Chr$(CInt(Val("&" & strDigits)))
      intPos = intPos + 2
    Endif
    intPos = intPos + 1
  Loop

  Return strOutput

End

Public Function NamingCon() As String[] '' Devuelve una lista de nombres de controles y su abreviación de tres caracteres.

  Dim stxNCon As New String[]

  stxNCon.Add("Bolean:bol")
  stxNCon.Add("ButtonBox:bto")
  stxNCon.Add("Button:btn")
  stxNCon.Add("CheckBox:cko")
  stxNCon.Add("Collection:ctn")
  stxNCon.Add("ColorButton:cob")
  stxNCon.Add("ColorChooser:coc")
  stxNCon.Add("ColorPalette:cop")
  stxNCon.Add("ColumnView:cuw")
  stxNCon.Add("ComboBox:cmo")
  stxNCon.Add("Connection:con")
  stxNCon.Add("Control:crl")
  stxNCon.Add("DataBase:dbs")
  stxNCon.Add("DataBrowser:dbw")
  stxNCon.Add("DataCombo:dcm")
  stxNCon.Add("DataComboView:dcv")
  stxNCon.Add("DataControl:dcr")
  stxNCon.Add("DataSource:dsr")
  stxNCon.Add("DateBox:dto")
  stxNCon.Add("DateChooser:dtc")
  stxNCon.Add("Date:dat")
  stxNCon.Add("Date[]:dtx")
  stxNCon.Add("Dial:dal")
  stxNCon.Add("DirBox:dio")
  stxNCon.Add("DirChooser:dic")
  stxNCon.Add("DirView:diw")
  stxNCon.Add("DocumentView:dcw")
  stxNCon.Add("DrawingArea:dra")
  stxNCon.Add("Editor:edi")
  stxNCon.Add("Expander:exn")
  stxNCon.Add("FileChooser:fic")
  stxNCon.Add("Fileld:fld")
  stxNCon.Add("FileProperties:fii")
  stxNCon.Add("FileView:fiw")
  stxNCon.Add("Float:flo")
  stxNCon.Add("Float[]:flx")
  stxNCon.Add("FontBox:fno")
  stxNCon.Add("FontChooser:fnc")
  stxNCon.Add("Frame:fra")
  stxNCon.Add("GambasEditor:gbe")
  stxNCon.Add("GridView:grw")
  stxNCon.Add("Hbox:hzo")
  stxNCon.Add("Hpanel:hzn")
  stxNCon.Add("Hsplit:hzs")
  stxNCon.Add("IconPanel:icn")
  stxNCon.Add("IconView:icw")
  stxNCon.Add("ImageView:imw")
  stxNCon.Add("InputBox:ito")
  stxNCon.Add("Integer:int")
  stxNCon.Add("Integer[]:inx")
  stxNCon.Add("Label:lbl")
  stxNCon.Add("LCDlabel:lcd")
  stxNCon.Add("ListBox:lso")
  stxNCon.Add("ListEditor:lse")
  stxNCon.Add("ListView:lsw")
  stxNCon.Add("MaskBox:mko")
  stxNCon.Add("MenuButton:mub")
  stxNCon.Add("MessageView:mgw")
  stxNCon.Add("MovieBox:mio")
  stxNCon.Add("Object:obj")
  stxNCon.Add("Panel:pnl")
  stxNCon.Add("PictureBox:pio")
  stxNCon.Add("Picture:pic")
  stxNCon.Add("Printer:ptr")
  stxNCon.Add("Process:prs")
  stxNCon.Add("ProgressBar:psr")
  stxNCon.Add("RadioButton:rdb")
  stxNCon.Add("Result:res")
  stxNCon.Add("ScrollArea:sca")
  stxNCon.Add("ScrollBar:scr")
  stxNCon.Add("ScrollView:scw")
  stxNCon.Add("Separator:sep")
  stxNCon.Add("SidePanel:sdn")
  stxNCon.Add("SliderBox:sdo")
  stxNCon.Add("Slider:sld")
  stxNCon.Add("SpinBox:sio")
  stxNCon.Add("Spiner:sir")
  stxNCon.Add("String:str")
  stxNCon.Add("String[]:stx")
  stxNCon.Add("SwitchButton:swb")
  stxNCon.Add("Table:tbl")
  stxNCon.Add("TableView:tbw")
  stxNCon.Add("TabPanel:tan")
  stxNCon.Add("TabStrip:tat")
  stxNCon.Add("TextArea:txa")
  stxNCon.Add("TextBoxExplained:teo")
  stxNCon.Add("TextBox:txo")
  stxNCon.Add("TextEdit:txe")
  stxNCon.Add("TextLabel:txl")
  stxNCon.Add("TextList:tlo")
  stxNCon.Add("TextView:txw")
  stxNCon.Add("Timer:tmr")
  stxNCon.Add("ToggleButton:tgb")
  stxNCon.Add("ToolButton:tob")
  stxNCon.Add("ToolPanel:ton")
  stxNCon.Add("TreeView:trw")
  stxNCon.Add("URLLabel:url")
  stxNCon.Add("ValueBox:vao")
  stxNCon.Add("Variant:vrt")
  stxNCon.Add("Variant[]:vrx")
  stxNCon.Add("Vbox:veo")
  stxNCon.Add("Vpanel:ven")
  stxNCon.Add("Vsplit:ves")
  stxNCon.Add("Wizard:wiz")

  Return stxNCon

End

Public Function HMStoSeconds(strTime As String) As Integer '' Devuelve el tiempo en segundos de una cadena que se le pase con el formato HH:MM:SS HORAS:MINUTOS:SEGUNDOS.

  Dim stxTime As New String[]
  Dim intTime As Integer

  stxTime = Split(strTime, ":")

  intTime = (stxTime[0] * 3600) + (stxTime[1] * 60) + stxTime[2]

  Return intTime

End

Public Function SecondsToHMS(intTime As Integer) As Integer[] '' Devuelve el tiempo en una matriz donde: 0-Y 1-M 2-D 3-H 4-N 5-S y como parametro de entrada requiere el tiempo en segundos

  Dim intH As Integer ' Horas
  Dim intN As Integer ' Minutos
  Dim intS As Integer ' Segundos
  Dim stxTime As New String[]

  Select intTime / 3600
    Case 0
      intH = 0
    Case 1
      intH = 1
      intN = 0
    Case Else
      intH = intTime / 3600

      Select (intTime Mod 3600) Mod 60
        Case 0
          intN = (intTime Mod 3600) / 60
          intS = 0
        Case Else
          intN = (intTime Mod 3600) / 60
          intS = (intTime Mod 3600) Mod 60

      End Select
  End Select

  stxTime.Add(intH)
  stxTime.Add(intN)
  stxTime.Add(intS)

  Return stxTime

End

Public Function MkConfXml(strXmlPath As String) As Integer '' Creacion de archivo de configuracion inicial xml.

  Dim writer As New XmlWriter
  Dim stxParameters As New String[]
  Dim intE As Integer
  Dim stxAtrib As New String[]
  Dim intA As Integer

  stxParameters.Add("MediaFolder:Path")
  stxParameters.Add("CapitalMode:Mode")
  stxParameters.Add("LangCurr:Name")
  stxParameters.Add("Languages:Name")
  stxParameters.Add("Software:Name:Seed:Prod")

  'Apertura del documento
  writer.Open(strXmlPath, True) 'True es para que le ponga los saltos de linea
  writer.StartElement(Application.Name)

  'Creación de una entidad
  For intE = 0 To stxParameters.Max
    stxAtrib.Clear
    stxAtrib = Split(stxParameters[intE], ":")

    writer.StartElement(stxAtrib[0])
    If stxAtrib.Count > 1 Then
      For intA = 1 To stxAtrib.Max
        writer.StartElement(stxAtrib[intA])
        writer.Text("")
        writer.EndElement
      Next
    Endif
    writer.EndElement
  Next

  writer.EndElement

  writer.EndDocument

  Return 1

End

Public Function ListDeldup(stxInput As String[]) As String[] '' Elimina elementos duplicados de una lista, requiere una String[] y devuelve una String[].

  Dim strTmp As String
  Dim stxOut As New String[]

  stxInput.Sort

  For Each strTmp In stxInput
    If stxOut.Find(strTmp) = -1 Then
      stxOut.Add(strTmp)
    Endif
  Next

  Return stxOut

End

Public Function WhereRun() As Integer ''Indica si el programa se esta ejecutando desde el IDE o desde un ejecutable solo utilizando código de gambas.

  Dim strProcess As String
  Dim intRun As Integer

  strProcess = File.Load("/proc" &/ CStr(Application.Id) &/ "comm")

  If Left(strProcess, 4) = "gbx3" Then

    intRun = 1
  Else
    intRun = 0
  Endif

  Return intRun

End

Public Function ScanFolder(strDir As String, Optional strExt As String) As String[] '' Escanea una carpeta que se pasa como parametro en busca de archivos se puede filtrar con una lista de extensiones separadas por dos puntos ":".

  Dim stxFiles As New String[]
  Dim stxExt As New String[]

  Dim intE As Integer
  Dim intR As Integer

  Dim strFileRaw As String
  Dim strFilePro As String
  Dim intA As Integer

  If IsDir(strDir) = True Then

    If strExt = "" Then

      stxFiles = RDir(strDir)

    Else
      If InStr(strExt, ":") <> 0 Then

        strExt = String.LCase(strExt)

        stxExt = Split(strExt, ":")

        If stxExt.Count > 1 Then

          For intE = 0 To stxExt.Max
            Select intE
              Case 0

                stxFiles = RDir(strDir, "*." & stxExt[intE])

              Case Else

                stxFiles.Insert(RDir(strDir, "*." & stxExt[intE]))

            End Select

          Next

        Endif

      Else
        stxFiles = RDir(strDir, "*." & strExt, True)
      Endif

    Endif

  Endif

  stxFiles.Sort

  For intA = 0 To stxFiles.Max

    stxFiles[intA] = strDir &/ stxFiles[intA]

  Next

  For intR = 0 To stxFiles.Max

    strFileRaw = stxFiles[intR]

    If Stat(strFileRaw).Type = gb.File Then
      strFilePro = MUtility.ConvertPath(strFileRaw)
      strFilePro = MUtility.Chek4SQL(strFilePro)

      If strFileRaw <> strFilePro Then

        Try Copy strFileRaw To strFilePro

        Wait 0.3
        If Exist(strFilePro) = True Then
          stxFiles[intR] = strFilePro
          Kill strFileRaw
        Else
          Message.Info(("El archivo") & " " &
            gb.NewLine & strFileRaw &
            gb.NewLine &
            ("Tiene caracteres no compatibles con") & " ascii")
        Endif

      Endif
    Endif

  Next

  Return stxFiles

End
