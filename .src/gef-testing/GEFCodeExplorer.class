' Gambas class file

Private strBasePath As String  'Directorio base a partir dle cual se buscan y cargan los proyectos
Private stxGDir As New String[] ' Lista de directorios que contienen proyectos Gambas
Private stxProjCurrent As New String[] ' Informacion del proyecto actual
Private intCurrentProjectKey As Integer ' Clave del proyecto seleccionado en el treeview, el proyecto actual.
Private strMethodName As String ' Nombre del método o formulario seleccionado
Public stxRecentDirs As New String[] ' Directorios recientes

'------- Variables para el explorador de código
Public stxFile As New String[]

'Public stxFast As New String[]
'Public stxMod As New String[]
'Public stxScope As New String[]
'Public stxType As New String[]
'Public stxName As New String[]
'Public stxArgs As New String[]
'Public stxRetn As New String[]
'Public stxDesc As New String[]

Public stxProjects As New String[]
' Todas estas matrices coinciden en indice -----------
Public stxMetFast As New String[]
Public stxMetMod As New String[]
Public stxMetFile As New String[]
Public stxMetVisi As New String[]
Public stxMetType As New String[]
Public stxMetName As New String[]
Public stxMetPara As New String[]
Public stxMetDesc As New String[]
Public stxMetCode As New String[] '
Public stxMetVars As New String[] '
Public stxMetMatch As New String[] ' Clave para usar luego en las busquedas, innicialmente es 0 para todos los items, luego es 1 si en las busquedas concuerda.

Public stxTitle As New String[] ' Lista de nombres de los proyectos
Public stxProjDir As New String[] ' Lista de directrios de los proyectos
' ----------------------------------------------------

'Public stxAll As New String[] ' Esta es la matriz que lo tiene todo sobre los proyectos, la que se usa para mostrar y buscar todo el código del proyecto.

' Public strClass As String
' Public strFast As String
' Public strMod As String
' Public strScope As String
' Public strType As String
' Public strName As String
' Public strArgs As String
' Public strRetn As String
' Public strDesc As String
' Public strCode As String
' Public strVars As String

Public inx As New Integer[]
Public bolLoaded As Boolean
Public strFilterText As String

' Mensajes
Public strMessage As String

Public Sub Run()

  dioProjects.Value = Application.Path
  hzsProjects.Layout = [1, 3, 1]

  Me.Width = FMain.Width
  Me.Height = FMain.Height

  strBasePath = Settings["RecentDirs/0", User.Home]
  LoadRecentDirs()

  LoadMenu()

  Me.Show()

  strMessage = ("Abriendo la aplicación")

End

Public Sub Form_Open()

  '  dioProjects.Value = Application.Path

  '  hzsProjects.Layout = [1, 3, 1]

  '  strBasePath = Settings["RecentDirs/0", User.Home]

  '  LoadRecentDirs()
  '  LoadMenu()
  'RefreshData(strBasePath)

  '  Me.Width = FMain.Width
  '  Me.Height = FMain.Height

End

Private Function LoadProjects(strPath As String) As String[] ''Carga los projectos de un directorio dado.

  Dim stxDirs As New String[]
  Dim strDir As String
  Dim intPr As Integer
  Dim stxProj As New String[]
  Dim stx As New String[]

  ' Obtencion de la lista de directorios
  stxGDir.Clear
  stxDirs = GEFUtility.RListDir(strPath)
  stxDirs.Insert([strPath], 0)
  ' Filtrado de directorios que sean proyectos Gambas
  For Each strDir In stxDirs
    If GEFUtility.DirGambas(strDir) = True Then
      If stxGDir.Find(strDir) = -1 Then
        stxGDir.Add(strDir)
        strMessage = ("Cargando directorio ") & ": " & strDir
      Endif
    Endif
  Next

  For intPr = 0 To stxGDir.Max
    stx.Clear

    stx = GEFSys.GetProjectInfo(stxGDir[intPr])

    stxProj.Add(stx.Join("\n"))

  Next

  Return stxProj

End

Public Function LoadModel(strPath As String, strProject As String) As Integer ''Carga toda la informacion del proyecto, datos, metodos, variables etc. todo lo necesario para buscar y leer el código de forma fácil y rápida.

  Dim stxDoc As New String[]
  Dim int As Integer
  'Dim strFile As String
  Dim strMetFile As String

  Dim strMetFast As String
  Dim strMetMode As String
  Dim strMetVisi As String
  Dim strMetType As String
  Dim strMetName As String
  Dim strMetPara As String
  Dim strMetDesc As String

  Dim strMetCode As String
  Dim strMetVars As String

  If strPath <> "" Then
    stxDoc = GEFUtility.DokuProj(strPath)

    For int = 0 To stxDoc.Max

      strMetFile = Split(stxDoc[int], "\t")[0]

      strMetFast = Split(Split(stxDoc[int], "\t")[2], "\n")[0]
      strMetMode = Split(Split(stxDoc[int], "\t")[2], "\n")[1]
      strMetVisi = Split(Split(stxDoc[int], "\t")[2], "\n")[2]
      strMetType = Split(Split(stxDoc[int], "\t")[2], "\n")[3]
      strMetName = Split(Split(stxDoc[int], "\t")[2], "\n")[4]
      strMetPara = Split(Split(stxDoc[int], "\t")[2], "\n")[5]
      '
      strMetDesc = Split(Split(stxDoc[int], "\t")[2], "\n")[7]

      strMetCode = Split(stxDoc[int], "\t")[3]
      strMetVars = Split(stxDoc[int], "\t")[4]

      stxProjDir.Add(strPath)
      stxTitle.Add(strProject)

      stxMetFast.Add(strMetFast)
      stxMetMod.Add(strMetMode)
      stxMetFile.Add(strMetFile)
      stxMetVisi.Add(strMetVisi)
      stxMetType.Add(strMetType)
      stxMetName.Add(strMetName)
      stxMetPara.Add(strMetPara)
      stxMetDesc.Add(strMetDesc)
      stxMetCode.Add(strMetCode)
      stxMetVars.Add(strMetVars)
      stxMetMatch.Add("1")

      strMessage = ("Cargando modelo") & ": " & strProject & "/" & strMetName
    Next
  Endif

  int = stxMetName.Count

  Return int

End

Public Sub RefreshData(strPath As String)

  Dim stxModels As New String[]
  Dim int As Integer
  Dim strDirectory As String
  Dim strTitle As String

  Inc Application.Busy

  SaveRecentDirs()

  'LoadMenu()

  stxProjects.Clear

  stxProjects = LoadProjects(strPath)
  '  stxAll.Clear

  For int = 0 To stxProjects.Max
    strDirectory = Split(stxProjects[int], "\n")[0]
    strDirectory = Split(strDirectory, "\t")[1]
    strTitle = Split(stxProjects[int], "\n")[1]
    strTitle = Split(strTitle, "\t")[1]
    stxModels.Clear

    strMessage = ("Cargando el modelo del projecto") & " " & strTitle

    If LoadModel(strDirectory, strTitle) > 0 Then
      strMessage = strTitle & " " & ("Cargado") & "."

    Endif
    '   stxAll.Add(stxModels)
  Next

  ' stxProjCurrent.Clear
  ' stxProjCurrent.Insert(stx)
  '
  If stxMetName.Count > 0 Then

    LoadTree()

  Endif

  Dec Application.Busy

End

Public Sub mubRefresh_Click()

  'tmrMessages.Enabled = True

  'Wait 0.01

  RefreshData(strBasePath)

  'tmrMessages.Stop

End

' Public Sub tmrMessages_Timer()
'
'   txlInformation.Text = Format(Now(), "yyyymmddnnssuu")
'   txlInformation.Visible = True
'   txlInformation.Refresh
'   'Me.Refresh
'
' End

' Private Sub LoadTree(stx As String[])
'
'   Dim strDir As String
'   Dim stxTag As New String[]
'   Dim stxVal As New String[]
'   Dim strTitle As String
'   Dim strIcon As String
'   Dim int As Integer
'   Dim intKey2 As Integer
'   Dim intKey1 As Integer
'   Dim stx2 As New String[]
'   Dim int2 As Integer
'   Dim intKey0 As Integer
'
'   Dim picIcon As Picture
'   Dim strKey As String
'   Dim strParent As String
'   Dim strKey3 As String
'   Dim stxFilter As New String[]
'   Dim strMet As String
'   Dim stxListFiles As New String[]
'   Dim strMethod As String
'   Dim strMethodExt As String
'
'   stxFilter.Add("module")
'   stxFilter.Add("class")
'   stxFilter.Add("form")
'
'   trvProjects.Clear
'   strParent = "groot\t-1"
'   ' # 1
'   trvProjects.Add(strParent, "Gambas projects", Picture["icon:/16/gambas"])
'
'   For int = 0 To stx.Max
'     stx2 = Split(stx[int], "\n")
'     stxTag.Clear
'     stxVal.Clear
'
'     For int2 = 0 To stx2.Max
'
'       stxTag.Add(Split(stx2[int2], "\t")[0])
'       stxVal.Add(Split(stx2[int2], "\t")[1])
'     Next
'
'     ' Nombre del programa
'     intKey0 = stxTag.Find("Directory")
'
'     If intKey0 > -1 Then
'       strDir = stxVal[intKey0]
'     Else
'       strDir = ""
'     Endif
'     intKey1 = stxTag.Find("Icon")
'     If intKey1 > -1 Then
'       If Exist(strDir) Then
'         If stxVal[intKey1] <> "" Then
'           strIcon = strDir &/ stxVal[intKey1]
'         Else
'           strIcon = "icon:/16/floppy"
'         Endif
'       Else
'         strIcon = "icon:/16/floppy"
'       Endif
'     Else
'       strIcon = "icon:/16/floppy"
'     Endif
'     intKey2 = stxTag.Find("Title")
'     If stxVal[intKey2] <> "" Then
'       strTitle = stxVal[intKey2]
'     Else
'       If Exist(strDir) Then
'         strTitle = CStr(int) & "#" & GEFUtility.DirBase(strDir)
'       Else
'         strTitle = CStr(int) & "#"
'       Endif
'     Endif
'     Wait 0.01
'
'     ' # 2
'     strKey = "gpro" & "\t" & CStr(int)
'     Select strIcon
'       Case "icon:/16/floppy"
'         trvProjects.Add(strKey, strTitle, Picture[strIcon], strParent)
'       Case Else
'         'Convertir una imagen en disco en una picture estrechada
'         picIcon = Image.Load(strIcon).Stretch(16, 16).Picture
'         trvProjects.Add(strKey, strTitle, picIcon, strParent)
'     End Select
'     ' # 3
'     Wait 0.01
'     stxListFiles = GEFUtility.RListFiles(strDir, stxFilter)
'
'     For Each strMet In GEFUtility.RListFiles(strDir, stxFilter)
'
'       strMethod = File.Name(strMet)
'       strMethodExt = File.Ext(strMet)
'       strKey3 = "gmet" & "\t" & CStr(int) & "\t" & strMethod
'
'       Select strMethodExt
'         Case "module"
'           picIcon = Image.Load("./module.png").Stretch(16, 16).Picture
'         Case "class"
'           picIcon = Image.Load("./procedure.png").Stretch(16, 16).Picture
'         Case "form"
'           picIcon = Image.Load("./form.png").Stretch(16, 16).Picture
'       End Select
'
'       trvProjects.Add(strKey3, strMethod, picIcon, strKey)
'     Next
'   Next
'
'   trvProjects[strParent].Selected = True
'   trvProjects[strParent].Expanded = True
'
' End

Private Sub LoadTree()

  Dim intR As Integer
  Dim strKey0 As String
  Dim strMetProj As String
  Dim strMetDir As String
  Dim strMetName As String
  'Dim strKey3 As String
  Dim picIcon As Picture
  Dim intQ As Integer
  Dim strKey1 As String
  Dim strProjName As String
  Dim strMetExt As String
  Dim strMetProjDir As String
  Dim strProjIcon As String
  Dim strProjDir As String
  'Dim intT As Integer
  Dim intkey1 As Integer
  Dim strKey2 As String
  Dim strMetMatch As String

  trvProjects.Clear
  strKey0 = "groot\t-1"

  trvProjects.Add(strKey0, "Gambas projects", Picture["icon:/16/gambas"])

  For intQ = 0 To stxProjects.Max
    strKey1 = "gproj\t" & CStr(intQ)
    intkey1 = intQ
    strProjDir = Split(Split(stxProjects[intQ], "\n")[0], "\t")[1]
    strProjName = Split(Split(stxProjects[intQ], "\n")[1], "\t")[1]
    strProjIcon = Split(Split(stxProjects[intQ], "\n")[7], "\t")[1]

    If strProjIcon <> "" Then
      If Exist(strProjDir &/ strProjIcon) = True Then
        If Stat(strProjDir &/ strProjIcon).Type = gb.File Then
          picIcon = Image.Load(strProjDir &/ strProjIcon).Stretch(16, 16).Picture
        Else
          picIcon = Picture["icon:/16/floppy"]
        Endif
      Else
        picIcon = Picture["icon:/16/floppy"]
      Endif
    Else
      picIcon = Picture["icon:/16/floppy"]
    Endif

    trvProjects.Add(strKey1, strProjName, picIcon, strKey0)

    'Next

    For intR = 0 To stxMetName.Max
      strMetProj = stxTitle[intR]
      strMetDir = File.Dir(stxMetFile[intR])
      strMetProjDir = stxProjDir[intR]
      strMetName = stxMetName[intR]
      strMetMatch = stxMetMatch[intR]

      strMetExt = File.Ext(stxMetFile[intR])

      'For intT = 0 To stxProjects.Max
      If strMetProjDir = Split(Split(stxProjects[intQ], "\n")[0], "\t")[1] Then
        If strMetMatch = "1" Then
          '  strKey1 = "gproj\t" & CStr(intT)
          '  intkey1 = intT
          '  Break
          'Endif
          'Next

          strKey2 = "gmet" & "\t" & CStr(intR) & "\t" & strMetName

          Select strMetExt
            Case "module"
              picIcon = Image.Load("./module.png").Stretch(16, 16).Picture
            Case "class"
              picIcon = Image.Load("./procedure.png").Stretch(16, 16).Picture
            Case "form"
              picIcon = Image.Load("./form.png").Stretch(16, 16).Picture

          End Select
          Print strKey2
          trvProjects.Add(strKey2, strMetName, picIcon, strKey1)
        Endif
      Endif
    Next
  Next

  trvProjects[strKey0].Selected = True
  trvProjects[strKey0].Expanded = True

End

Public Sub trvProjects_Select()

  Dim strKey As String
  Dim strType As String
  Dim intMetKey As Integer
  Dim intLine As Integer
  Dim stxCodeTmp As New String[]

  If InStr(trvProjects.Key, "\t") > 0 Then
    strKey = Split(trvProjects.Key, "\t")[1]
    intCurrentProjectKey = CInt(strKey)
    strType = Split(trvProjects.Key, "\t")[0]

    Select strType

      Case "gpro"
        ' Proyecto de gambas
        'txaProject.Text = GEFWeb.ListHtml(stxProjCurrent[intCurrentProjectKey], "\n")
        'txaProject.Visible = True
        'txeCode.Visible = False
        pnlVar.Visible = False
        tboOpen.Enabled = True
        Print strType & ": " & strKey
      Case "gmet"
        strMethodName = Split(trvProjects.Key, "\t")[2]
        intMetKey = CInt(Split(trvProjects.Key, "\t")[1])

        'txaProject.Text = ""
        'txaProject.Visible = False
        'txeCode.Visible = True
        'txeVars.Visible = True
        'txlDesc.Visible = True

        stxCodeTmp = Split(stxMetCode[intMetKey], "\n")
        grwCode.Columns.Count = 1
        grwCode.Rows.Count = stxCodeTmp.Count
        grwCode.Grid = False
        grwCode.Mode = Select.Multiple

        For intLine = 0 To stxCodeTmp.Max
          ' txeCode.Text &= stxCodeTmp[intLine]
          ' txaLine.Text &= CStr(intLine) & "\n"
          ' lsoCode.Add(stxCodeTmp[intLine])
          ' lsoLine.Add(CStr(intLine))

          grwCode[intLine, 0].Text = stxCodeTmp[intLine]

        Next

        'txaCode.Text = stxMetCode[intMetKey]

        'txeVars.Text = stxMetVars[intMetKey]
        'txlDesc.Text = stxMetDesc[intMetKey]

        pnlVar.Visible = True
        tboOpen.Enabled = False
        Print strType & ": " & strKey & " [" & strMethodName & "]"

      Case Else
        'txaProject.Text = ""
        'txaProject.Visible = False
        'txeCode.Visible = True
        pnlVar.Visible = True
        tboOpen.Enabled = False
        Print strType & ": " & strKey
    End Select

  Endif

End

Public Sub tboOpen_Click()

  Dim int As Integer
  Dim strDirGbp As String
  Dim strNmeGbp As String
  Dim stx As New String[]

  stx = Split(stxProjCurrent[intCurrentProjectKey], "\n")

  For int = 0 To stx.Max
    If Split(stx[int], "\t")[0] = "Directory" Then
      strDirGbp = Split(stx[int], "\t")[1]
      strNmeGbp = Split(strDirGbp, "/")[Split(strDirGbp, "/").Max]
      Break
    Endif
  Next
  If Message.Question(("Quiere abrir el proyecto") & " " & strNmeGbp & "\n" &
      ("con el editor externo") & " Gamabas IDE?", "Aceptar", "Cancelar") = 1 Then
    Shell "gambas3 '" & strDirGbp & "'"
  Endif

End

Private Sub LoadRecentDirs()

  Dim int As Integer
  Dim strDirTmp As String

  stxRecentDirs.Clear

  For int = 0 To 4
    strDirTmp = Settings["RecentDirs/" & CStr(int), ""]
    If Exist(strDirTmp) = True Then
      If Stat(strDirTmp).Type = gb.Directory Then
        stxRecentDirs.Add(strDirTmp)
      Endif
    Endif
  Next

End

Private Sub SaveRecentDirs()

  Dim int As Integer

  For int = 0 To stxRecentDirs.Max

    Settings["RecentDirs/" & CStr(int)] = stxRecentDirs[int]

  Next

End

Public Sub LoadMenu()

  Dim mnu As Menu
  Dim mui As Menu
  Dim int As Integer

  With mubRefresh
    .Menu = "mnu"
  End With

  ' Relleno el Menu del MenuButton

  For Each mnu In Me.Menus
    mnu.Delete
  Next

  mnu = New Menu(Me) As "mnu"
  '' Crea el menu inicial

  For int = 0 To stxRecentDirs.Max + 1
    Select int
      Case stxRecentDirs.Max + 1
        mui = New Menu(mnu) As "mui"
        ' Crea el menu ítem "Cargar otro directorio"
        mui.Text = ("Cargar otro directorio")
        mui.Tag = "newdir"
      Case Else
        If Exist(stxRecentDirs[int]) = True Then
          If Stat(stxRecentDirs[int]).Type = gb.Directory Then
            mui = New Menu(mnu) As "mui"
            ' Crea el menu ítem directorio recientes
            mui.Text = CStr(int) & "../" & GEFUtility.DirBase(stxRecentDirs[int])
            mui.Tag = stxRecentDirs[int]
          Endif
        Endif
    End Select
  Next

End

Public Sub mui_Click()

  Print Last.Text
  Print Last.Tag

  Select Last.Tag
    Case "newdir"
      If stxRecentDirs.Count > 0 Then
        strBasePath = GEFDesk.DirChooser(stxRecentDirs[0])
      Else
        strBasePath = GEFDesk.DirChooser(User.Home)
      Endif
      stxRecentDirs.Add(strBasePath, 0)
      SaveRecentDirs()
    Case Else
      strBasePath = Last.Tag
  End Select

  If stxRecentDirs.Count > 5 Then
    stxRecentDirs.Extract(5, stxRecentDirs.Count - 5)
  Endif

  RefreshData(strBasePath)
  Print stxRecentDirs.Join("\n")
  LoadMenu()

End

' Public Function LoadModel(strPath As String) As Integer ''Carga la lista de metodos del proyecto.
'
'   Dim stx As New String[]
'   Dim int As Integer
'
'   If strPath = "" Then
'     strPath = Application.Path
'   Else
'     If Exist(Application.Path) = False Then
'       strPath = Application.Path
'     Endif
'   Endif
'   stx = GEFUtility.DokuProj(Application.Path)
'
'   For int = 0 To stx.Max
'     stxClass.Add(Split(stx[int], "\t")[1])
'     stxMethod.Add(Split(stx[int], "\t")[2])
'     stxCode.Add(Split(stx[int], "\t")[3])
'     stxVars.Add(Split(stx[int], "\t")[4])
'   Next
'
'   int = stx.Count
'
'   Return int
'
' End

Public Sub Search_Change()

  Dim bto As ButtonBox

  bto = Last
  strFilterText = bto.Text
  Print bto.Tag & ":" & bto.Text

  Strainer(bto.Tag, bto.Text)

End

Public Sub Search_Click()

  Dim intS As Integer

  For intS = 0 To stxMetMatch.Max

    stxMetMatch[intS] = "1"
  Next
  LoadTree()

End

Public Sub Strainer(strMode As String, strText As String) '' Filtrado de métodos y codigo.

  Dim intS As Integer

  Select strMode
    Case "method"
      For intS = 0 To stxMetName.Max
        If InStr(String.LCase(stxMetName[intS]), String.LCase(strText))
          stxMetMatch[intS] = "1"
        Else
          stxMetMatch[intS] = ""
        Endif
      Next
    Case "code"
      For intS = 0 To stxMetCode.Max
        If InStr(String.LCase(stxMetCode[intS]), String.LCase(strText))
          stxMetMatch[intS] = "1"
        Else
          stxMetMatch[intS] = ""
        Endif
      Next
  End Select

  LoadTree()

End

' Public Sub ScrollView1_Scroll()
'
'   lsoCode.Scroll = ScrollView1.Scroll
'   lsoLine.Scroll = ScrollView1.Scroll
'
' End

Public Sub btnCopy_Click()

End
