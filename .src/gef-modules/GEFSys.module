' Gambas module file

'
' Gambas extra functions
' Compilation of utilities and functions developed by the gambas comunity.
'
' Copyright (C) Martín Belmonte.
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Public Function Resume() As String

  Dim strResume As String

  strResume = "<b>So: </b>" & Distro()
  strResume &= " <b>Arquitectura.So: </b>" & ArqSO()
  strResume &= " <b>Arquitectura.Proc: </b>" & ArqMicro()
  strResume &= " <b>Procesador: </b>" & MicroType()
  strResume &= " <b>Ram: </b>" & Ram()
  strResume &= " <b>Nombre.PC: </b>" & ComputerName()
  strResume &= " <b>Usuario: </b>" & CurrentUser()
  strResume &= " <b>Usuarios: </b>" & AllUsers()
  strResume &= " <b>Grupo: </b>" & WGroup()
  strResume &= " <b>Gambas: </b>" & Vgambas()
  strResume &= " <b>Actualizado: </b>" & LastUpgrade()

  Return strResume

End

Public Function DeFiBro() As String ''Devuelve el administrador de archivos por defecto.

  Dim str As String

  Shell "xdg-mime query default inode/directory" To str

  Return str

End

Public Function DistroNoshell() As String ''Devuelve la distribución instalada xmi

  Dim str As String

  str = File.Load("/etc/issue.net")

  Return str

End

Public Function Distro() As String

  Dim strDistro As String
  Dim strDistroShort As String
  Dim stxDistros As New String[]
  Dim stxDistro As New String[]
  Dim intN As Integer

  strDistro = File.Load("/etc/issue.net")
  Replace(strDistro, gb.Tab, "")
  strDistro = Trim(strDistro)

  strDistro = strDistro
  strDistro = Replace(strDistro, "  ", " ")
  strDistro = Replace(strDistro, "  ", " ")
  strDistro = Replace(strDistro, gb.Tab, " ")
  strDistro = Replace(strDistro, gb.Tab, " ")
  strDistro = String.LCase(strDistro)

  stxDistros.clear
  stxDistro.clear

  stxDistros.Add("arch")
  stxDistros.Add("debian")
  stxDistros.Add("fedora")
  stxDistros.Add("redhat")
  stxDistros.Add("gentoo")
  stxDistros.Add("manjaro")
  stxDistros.Add("mint")
  stxDistros.Add("opensuse")
  stxDistros.Add("ubuntu")
  stxDistros.Add("peppermint")

  stxDistro = Split(strDistro, " ")

  strDistroShort = "Desconocida"

  For intN = 0 To stxDistro.Max

    If stxDistros.Find(stxDistro[intN]) <> -1 Then
      strDistroShort = stxDistro[intN]
      Break
    Endif

  Next

  Return strDistroShort

End

Public Function ArqSO() As String ''Devuelve la Arquitecura del Sistema Operativo

  Return System.Architecture

End

Public Function ArqMicro() As String ''Devuelve la Arquitecura del Procesador

  Dim sArqPro As String

  Exec ["uname", "-p"] To sArqPro 'Almacenamos la Arquitectura del Procesador
  Return Replace(sArqPro, "\n", "")

End

Public Function MicroType() As String ''Devuelve el tipo de Procesador

  Dim sPro As String

  Shell "cat /proc/cpuinfo | grep -i ghz | uniq | cut -f2 -d" & ":" To sPro
  Return LTrim(Replace(sPro, "\n", ""))

End

Public Function Ram() As String ''Devuelve cantidad de Ram en MB tambien con free -m

  Dim sRam As String

  Exec ["cat", "/proc/meminfo"] To sRam
  Try sRam = Scan(sRam, "*MemTotal:*\n*")[1] 'Ocultamos el Error si no encuentra MenTotal: * \n
  If Error Then
    sRam = ""
  Else
    While Not IsDigit(Right(sRam))
      sRam = Left(sRam, -1)
    Wend
    sRam = Trim(sRam)
  Endif

  If sRam Then
    Try sRam = Format(CInt(sRam) / 1024, "0") & " MB"
    If Not Error Then Return sRam
  Endif

End

Public Function ComputerName() As String ''Devuelve el nombre del pc

  Return System.Host

End

Public Function CurrentUser() As String[] ''Devuelve el usuario activo

  Return System.User.Name

End

Public Function GetProjectInfo(strPath As String) As String[] ''Devuelve una matriz con los datos de un projecto de gambas, como parametro de entrada requieres el direcotrio raíz del proyecto.

  Dim strFile As String
  Dim stxStd As New String[]
  Dim stxPro As New String[]
  Dim stxOut As New String[]
  Dim int As Integer
  Dim strTag As String
  Dim intkey As Integer
  Dim strVal As String

  ' Informacion esándar de un proyecto
  stxStd.Clear
  stxStd.Add("Directory" & "\t" & strPath)
  stxStd.Add("Title")
  stxStd.Add("Description")
  stxStd.Add("Authors")
  stxStd.Add("Component")
  stxStd.Add("CreateMenu")
  stxStd.Add("GambasVersion")
  stxStd.Add("Icon")
  stxStd.Add("Language")
  stxStd.Add("Packager")
  stxStd.Add("Startup")
  stxStd.Add("TabSize")
  stxStd.Add("Translate")
  stxStd.Add("Vendor")
  stxStd.Add("Version")
  stxStd.Add("WebSite")
  stxStd.Add("Address")
  stxStd.Add("Categories")
  stxStd.Add("CreateEachDirectory")
  stxStd.Add("ExtraDependencies")
  stxStd.Add("Groups")
  stxStd.Add("License")
  stxStd.Add("Maintainer")
  stxStd.Add("Menus")
  stxStd.Add("MimeTypes")
  stxStd.Add("PackageName")
  stxStd.Add("SourcePath")
  stxStd.Add("Systems")
  stxStd.Add("Tags")
  stxStd.Add("Type")
  stxStd.Add("Url")
  stxStd.Add("UseHttpServer")
  stxStd.Add("VendorPrefix")
  stxStd.Add("GambasProjectFile")
  stxStd.Add("CompiledWithGambas")
  stxStd.Add("CreateShortcut")
  stxStd.Add("KeepDebugInfo")
  stxStd.Add("CreateShortcut")
  stxStd.Add("PackageSignature")
  stxStd.Add("SameFiles")
  stxStd.Add("ExtraFiles")
  stxStd.Add("ControlPublic")
  stxStd.Add("ModulePublic")
  stxStd.Add("SameDependencies")
  stxStd.Add("SameFiles")
  stxStd.Add("Prefix")
  stxStd.Add("PackageVersion")
  stxStd.Add("ControlPublic")
  stxStd.Add("SameDependencies")
  stxStd.Add("SameFiles")
  stxStd.Add("ControlPublic")
  stxStd.Add("ModulePublic")
  stxStd.Add("SameDependencies")
  stxStd.Add("SameFiles")
  stxStd.Add("RedirectStderr")
  stxStd.Add("ControlPublic")
  stxStd.Add("SameDependencies")
  stxStd.Add("SameFiles")
  stxStd.Add("ControlPublic")
  stxStd.Add("SameDependencies")
  stxStd.Add("SameFiles")
  stxStd.Add("RedirectStderr")
  stxStd.Add("UseTerminal")
  stxStd.Add("RedirectStderr")
  stxStd.Add("Profiling")
  stxStd.Add("ControlPublic")
  stxStd.Add("ModulePublic")
  stxStd.Add("Warnings")
  stxStd.Add("CreateShortcut")
  stxStd.Add("ControlPublic")
  stxStd.Add("ModulePublic")
  stxStd.Add("ControlPublic")
  stxStd.Add("ModulePublic")
  stxStd.Add("ExtraDesktop")

  strFile = strPath &/ ".project"

  If Stat(strFile).Type = gb.File Then
    ' Carga del archivo .proyect
    stxPro = GEFUtility.FileLoad(strFile)

    For int = 0 To stxPro.Max
      Select InStr(stxPro[int], "=")
        Case 0
          Select String.Mid(stxPro[int], 1, 16)
            Case "# Gambas Project"
              strTag = "GambasProjectFile"
              strVal = Replace(stxPro[int], "# Gambas Project File ", "")
              stxStd[stxStd.Find(strTag)] = stxStd[stxStd.Find(strTag)] & "\t" & strVal
            Case "# Compiled with "
              strTag = "CompiledWithGambas"
              strVal = Replace(stxPro[int], "# Compiled with Gambas ", "")
              stxStd[stxStd.Find(strTag)] = stxStd[stxStd.Find(strTag)] & "\t" & strVal
          End Select

        Case Else

          strTag = Split(stxPro[int], "=")[0]
          If stxStd.Find(strTag) = -1 Then
            Print "Tag missing" & "\t" & strTag
            stxStd.Add(strTag)
            Print
          Endif

      End Select

    Next
  Endif

  stxOut.Clear
  stxOut.Insert(stxStd)

  For int = 0 To stxPro.Max
    If InStr(stxPro[int], "=") > 0 Then
      intkey = stxStd.Find(Split(stxPro[int], "=")[0])
      strVal = Split(stxPro[int], "=")[1]
      If intkey > -1 Then
        stxOut[intkey] = stxOut[intkey] & "\t" & strVal
      Else

      Endif
    Endif
  Next

  For int = 0 To stxOut.Max
    If InStr(stxOut[int], "\t") = 0 Then
      stxOut[int] = stxOut[int] & "\t"
    Endif
  Next

  Return stxOut

End

Public Function GetSystemUsers() As String[] ''Devuelve el una lista de usuarios del sistema Linux.

  Dim stxTUsr As New String[]
  Dim stxUsr As New String[]
  Dim strUser As String

  stxTUsr = GEFUtility.FileLoad("/etc/passwd")

  If stxTUsr.Count > 0 Then

    For Each strUser In stxTUsr
      If Split(strUser, ":")[5] = "/home" &/ Split(strUser, ":")[0] Then
        If InStr(Split(strUser, ":")[6], "false") = 0 Then
          stxUsr.Add(Split(strUser, ":")[0])
        Endif
      Endif
    Next
  Endif

  Return stxUsr

End

Public Function AllUsers() As String ''Devuelve los usuarios que hemos creado

  Dim sUser As String

  Shell "cat /etc/passwd |grep -iw '100.' | cut -d ':' -f1" To sUser

  Return Replace(sUser, "\n", "")

End

Public Function WGroup() As String ''Devuelve el Grupo de trabajo del pc

  Return System.Domain

End

Public Function SysFile(ruta As String) As String ''Devuelve el sistema de ficheros

  Dim sSF As String

  Exec ["df", "-h", ruta] To sSF 'Almacenamos caracteristicas del Sistema de Ficheros pasado en ruta
  Try sSF = Scan(sSF, "*\n*")[1] 'Ocultamos el Error si no encuentra la cadena
  If Error Then sSF = ""
  Return Replace(sSF, "\n", "")

End

Public Function Vgambas() As String ''Devuelve la versión de gambas intalada en el pc

  Return System.FullVersion

End

Public Function ProjInfo(Optional strPath As String) As String[] ''Devuelve una matriz con la información del projecto alojada en el archivo ".project" si no se le pasa el camino del archivo .project del que se desea extraer la información la funcion devolvera los datos del proyecto local. Luego, el orden de cada item es el siguiente:<ol start="0"><li>Title</li><li>Description</li><li>Authors</li><li>Vendor</li><li>Version</li><li>Component</li><li>Language</li><li>Startup</li><li>Icon</li></ol>

  Dim stxKeys As New String[]
  Dim stxInfo As New String[]
  Dim strProject As String
  Dim stxTmp As New String[]
  Dim stxTag As New String[]
  Dim stxVal As New String[]
  Dim int As Integer
  Dim intKey As Integer
  Dim intTag As Integer
  Dim strVal As String
  Dim intCount As Integer

  stxKeys.Add("Title")
  stxKeys.Add("Description")
  stxKeys.Add("Authors")
  stxKeys.Add("Vendor")
  stxKeys.Add("Version")
  stxKeys.Add("Component")
  stxKeys.Add("Language")
  stxKeys.Add("Startup")
  stxKeys.Add("Icon")

  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")
  stxInfo.Add("")

  If strPath = "" Then
    strPath = ".project"
  Endif

  If Exist(strPath) Then
    strProject = File.Load(strPath)
    stxTmp = Split(strProject, "\n")
    For int = 0 To stxTmp.Max
      If InStr(stxTmp[int], "=") > 0 Then
        Select Split(stxTmp[int], "=")[0]
          Case "Title", "Startup", "Icon", "Version", "Component", "Description", "Authors", "Language", "Vendor"
            stxTag.Add(Split(stxTmp[int], "=")[0])
            strVal = Replace(Split(stxTmp[int], "=")[1], Chr(34), "")
            strVal = Replace(strVal, "\n", ":")
            stxVal.Add(strVal)
        End Select
      Endif
    Next
  Endif

  If stxTag.Count > 0 Then
    For intKey = 0 To stxKeys.Max
      intCount = 0

      For intTag = 0 To stxTag.max

        If stxTag[intTag] = stxKeys[intKey] Then

          Select intCount
            Case 0
              stxInfo[intKey] &= stxVal[intTag]
            Case Else
              stxInfo[intKey] &= ":" & stxVal[intTag]
          End Select

          Inc intCount

        Endif

      Next

    Next

  Endif

  Return stxInfo

End

Public Function Ls(Ruta As String) As String ''Devuelve un listado del directorio pasado en ruta

  Dim sListado As String

  Shell "ls -a " & Ruta To sListado 'Almacenamos listado directorio
  Return RTrim(Replace(sListado, "\n", ":"))
  'Otros comandos que devuelven un listado con las aplicaciones instaladas
  ' dpkg - l
  ' dpkg --get-selections es igual a dpkg -l | cut -d ' ' -f3

End

Public Function AddressIP() As String ''Devuelve la IP del equipo, solo funciona bajo OS con Systemd, para ello usa shell y el comando "ip addr show".

  Dim strAddr As String
  Dim stxAddr As New String[]
  Dim strPart As String
  Dim strIP As String

  Shell "ip addr show" To strAddr
  If Len(strAddr) > 0 Then
    stxAddr = Split(strAddr, " ")
    For Each strPart In stxAddr
      If InStr(strPart, ".") > 0 Then
        If InStr(strPart, "/24") > 0 Then
          strIP = Split(strPart, "/")[0]
          Print strPart
        Endif
      Endif
    Next
  Endif
  Return strIP

End

Public Function LANIP(Optional strBase As String) As String[] ''Devuelve las IP v4 de la red local, como parametro de entrada requiere la direccion IP base, por ejemplo "192.168.1" pero si no se le pasa el parametro entonces usa la ip de la computadora donde se este ejecutando el programa quitandole el último número. El formato de salida de cada item de la matriz es host-name[tab]8.8.8.8

  Dim strAddr As String
  Dim stxTmp As New String[]
  Dim stxAddr As New String[]
  Dim strPart As String

  If InStr(strBase, ".") = 0 Then
    strBase = Split(AddressIP(), ".")[0] & "."
    strBase &= Split(AddressIP(), ".")[1] & "."
    strBase &= Split(AddressIP(), ".")[2]
  Endif

  Shell "nmap -sP " & strBase & ".1-254" To strAddr

  If Len(strAddr) > 0 Then
    stxTmp = Split(strAddr, "\n")
    For Each strPart In stxTmp
      If InStr(strPart, "Nmap scan report for ") > 0 Then
        strPart = Replace(strPart, "Nmap scan report for ", "")
        strPart = Replace(strPart, " ", "\t")
        strPart = Replace(strPart, "(", "")
        strPart = Replace(strPart, ")", "")
        stxAddr.Add(strPart)
      Endif
    Next
  Endif
  Return stxAddr

End

Public Function LastNIP() As String ''Devuelve el último digito de la Ip

  Dim sIPs As String

  Shell "ifconfig | grep inet: | grep Difus.|cut -d '.' -f5|cut  -d ' ' -f1" To sIPs
  Return RTrim(Replace(sIPs, "\n", " "))

End

Public Function Hdserial() As String ''Devuelve el número de serie del disco duro para utilizarlo como Pk en la BDD

  Dim sNS As String

  Shell "udevadm info --query=property --name=sda | grep SERIAL_ | awk -F '=' '{print $2}'" To sNS
  Return RTrim(Replace(sNS, "\n", " "))

End

Public Function UUIDswap() As String
  ''Devuelve UUID de la swap para utilizarlo como PK de la BDD
  'Requiere permisos de Administrador

  Dim sUID As String

  Shell "blkid | grep swap | cut -d ' ' -f2 |cut -d '=' -f2" To sUID
  Return Left(Right(sUID, -1), -2)

End

Public Function LastUpgrade() As String ''Devuelve la Fecha de la ultima vez que se actualizo el sistema

  Dim long_iso As String
  Dim strDistroShort As String
  Dim strLastUpgrade As String

  long_iso = "long-iso"

  strDistroShort = Distro()

  Select strDistroShort
    Case "debian"
      strLastUpgrade = Format$(Stat("/var/log/apt").Time, "yyyy/mm/dd hh:nn:ss")
      strLastUpgrade = RTrim(Replace(strLastUpgrade, "\n", " "))

    Case Else
      strLastUpgrade = ("Desconocido")
  End Select

  Return strLastUpgrade

End

Public Function PkgStat(strPkg As String) As Boolean ''Devuelve el estado respecto a la instalacion de un paquete. Requiere como parametro de entrada el nombre exacto del paquete.

  Dim strDistroShort As String
  Dim strCommand As String
  Dim strPkgStatus As String
  Dim bolPkgStatus As Boolean

  strDistroShort = Distro()

  ' Obtencion de resultados
  Select strDistroShort
    Case "arch", "manjaro"
      strCommand = "pacman -Qs " & strPkg

      Shell strCommand & " 2>&1" To strPkgStatus

      If strPkgStatus <> "" Then
        strPkgStatus = Split(strPkgStatus, "\n")[0]
        strPkgStatus = Split(strPkgStatus, " ")[0]
      Endif

      Select strPkgStatus
        Case "local/" & strPkg
          bolPkgStatus = True
        Case Else
          bolPkgStatus = False
      End Select

    Case "debian", "ubuntu", "mint", "peppermint"

      strCommand = "dpkg-query -W -f='${Status}\n' " & strPkg

      Shell strCommand & " 2>&1" To strPkgStatus

      If strPkgStatus = "install ok installed\n" Then
        bolPkgStatus = True
      Else
        bolPkgStatus = False
      Endif

  End Select

  Return bolPkgStatus

End

Public Function XDGFolder() As String[] ''Devuelve una matriz de texto con las rutas de las carpetas de musica, imagenes, documentos etc. del directorio /home/user

  Dim strHome As String
  Dim stxXDGTmp As New String[]
  Dim stxXDGFolders As New String[]
  Dim strDirsFile As String
  Dim strFlux As String
  Dim intL As Integer
  Dim strTmp As String
  Dim strVar As String
  Dim strFolder As String

  strHome = User.Home

  strDirsFile = strHome &/ ".config/user-dirs.dirs"

  If Exist(strDirsFile) Then
    strFlux = File.Load(strDirsFile)

    stxXDGTmp = Split(strFlux, gb.NewLine)

    For intL = 0 To stxXDGTmp.Max
      strTmp = stxXDGTmp[intL]
      If strTmp <> "" Then
        If String.Mid(strTmp, 1, 4) = "XDG_" Then
          If InStr(strTmp, "=")

            strVar = ""
            strFolder = ""

            strVar = Split(strTmp, "=")[0]
            strVar = Split(strVar, "_")[1]
            strVar = String.LCase(strVar)

            strFolder = Split(strTmp, "=")[1]
            strFolder = Replace(strFolder, "$HOME/", "")
            strFolder = Replace(strFolder, Chr(34), "")
            strFolder = strHome &/ strFolder

            stxXDGFolders.Add(strVar & ":" & strFolder)

          Endif
        Endif
      Endif
    Next
  Endif

  Return stxXDGFolders

End

Public Function PkgDep(stxPackages As String[]) As String[] ''Verifica si los paqutes que se le pasan como parametros en una matriz, estan instalados en el sistema, devuelve una matriz con los paquetes que no estan instalados, si todo lo estuviera la matriz devuelta estara vacia.

  Dim intPkg As Integer
  Dim stxMissing As New String[] ' Lista de paquetes que falta instalar

  For intPkg = 0 To stxPackages.Max
    If PkgStat(stxPackages[intPkg]) = False Then
      stxMissing.Add(stxPackages[intPkg])
    Endif
  Next

  Return stxMissing

End

Public Sub Install_read()

  Dim StrInput As String

  Read #Last, StrInput, -80
  Print StrInput

End
