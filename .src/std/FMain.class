' Gambas class file

'
' Gambas extra functions
' Armazón para contruir pogramas.
'
' Copyright (C) Martín Belmonte y otros
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

'### Eventos básicos de la interfaz como, por ejemplo, ayuda, "acerca de..." etc. En general comúnes a todas los programas ###

Public stxFile As New String[]
Public stxClass As New String[]
Public stxFast As New String[]
Public stxMod As New String[]
Public stxScope As New String[]
Public stxType As New String[]
Public stxName As New String[]
Public stxArgs As New String[]
Public stxRetn As New String[]
Public stxDesc As New String[]
Public stxCode As New String[]
Public stxVars As New String[]

Public stxMethod As New String[]
Public strClass As String
Public strFast As String
Public strMod As String
Public strScope As String
Public strType As String
Public strName As String
Public strArgs As String
Public strRetn As String
Public strDesc As String
Public strCode As String
Public strVars As String

Public inx As New Integer[]
Public bolLoaded As Boolean
Public strFilterText As String
' // Variables para la solapa de datos
Public strGridState As String
'// Variables para el reajuste de columnas
Private intColumn As Integer
Private bolResize As Boolean

Public Sub Form_Open()

  hzsData.Layout = [1, 4]

  ShowData()

End

Public Function ObjectInfo(obj As Object) As String[] ''Devuelve una matriz con la informacion de un objeto

  Dim stx As New String[]

  stx.Add(Object.Type(obj))
  stx.Add(obj.Name)
  stx.Add(obj.Background)
  stx.Add(obj.Foreground)
  stx.Add(CStr(obj.Children.Count))

  Return stx

End

Public Sub tobAbout_Click()

  GEFAbout.ShowModal()

End

Public Sub mnuAbout_Click()

  GEFAbout.ShowModal()

End

Public Sub tobConfig_Click()

  GEFConfig.ShowModal()

End

Public Sub mnuConfig_Click()

  GEFConfig.ShowModal()

End

Public Sub tobHelp_Click()

  Dim strHtml As String

  Dim strPDF As String
  Dim strMD As String
  Dim prsRM As Process
  Dim prsMd As Process

  strHtml = GEFUtility.DokuHtml(Application.Path)

  If Exist("/tmp/pdf") Then
    prsRM = Shell "rm -r -f /tmp/pdf"
    While
      prsRM.State = prsRM.Running
      Wait 0.1
    Wend
  Endif

  prsMd = Shell "mkdir -p /tmp/pdf"
  While
    prsMd.State = prsMd.Running
    Wait 0.1
  Wend

  File.Save("/tmp/pdf/help.html", strHtml)

  Copy "logo.png" To "/tmp/pdf/logo.png"
  Wait 0.5

  strPDF = GEFBatch.HTMLPDF("/tmp/pdf/help.html", "pandoc")
  strMD = GEFBatch.HTMLMD("/tmp/pdf/help.html", "pandoc")

  If Exist(strPDF) Then
    Desktop.Open(strPDF)
  Endif

  If Exist(strMD) Then
    Desktop.Open(strMD)
  Endif

  'GEFPrint.Preview(strHtml)

End

Public Sub mnuHelp_Click()

  Dim strHtml As String

  Select GEFStarter.stxProgVal[9]
    Case "ide"
      strHtml = GEFUtility.DokuHtml(Application.Path)
    Case Else
      strHtml = File.Load(Application.Path &/ "readme.html")
  End Select

  GEFPrint.Preview(strHtml)

End

Public Sub mnuDevHelp_Click()

  DevDocument()

End

Public Sub tobReport_Click()

  'Dim strHtml As String
  'strHtml = File.Load(Application.Path &/ "readme.html")

  'GEFPrint.Preview(strHtml)
  Print "Imprimiendo: " & GEFStarter.stxProgVal[20]
  Select GEFStarter.stxProgVal[20]

    Case ""
      Print "Nada que imprimir"
    Case "varietas"

  End Select

End

Public Sub mnuPrint_Click()

  GEFPrint.ShowModal()

End

Public Sub OpenHelp()

  Dim strFile As String

  strFile = GEFStarter.strAppPath &/ "README.md"
  If Exist(strFile)
    Desktop.Open(strFile)
  Endif

End

' Public Sub grwData_ColumnResize(Column As Integer)
'
'   Settings["GridColumn/" & CStr(Column)] = grwData.Columns[Column].Width
'
' End

'### Fin de eventos básicos de la interfaz.

Public Sub DevDocument()

  Dim strPath As String
  Dim strInput As String
  Dim strOutput As String

  ' Aquí se genera el documento html
  strInput = GEFUtility.DokuHtml(Application.Path &/ ".src")

  strPath = Application.Path &/ "devdoc.html"

  File.Save(strPath, strInput)
  Wait 2

  Select GEFStarter.stxProgVal[9]
    Case "ide"
      ' [10] es el método de creación para el tipo de documento 1
      strOutput = GEFBatch.HTMLPDF(strPath, GEFStarter.stxProgVal[10])
      Desktop.Open(strOutput, True)

    Case Else
      If Exist(strOutput) Then
        Desktop.Open(strOutput, True)
      Else
        Message.Info("La documentacion para el desarrollador no esta disponible")
      Endif
  End Select

End

Public Function LoadModel(strPath As String) As Integer ''Carga la lista de metodos del proyecto.

  Dim stx As New String[]
  Dim int As Integer

  If strPath = "" Then
    strPath = Application.Path
  Else
    If Exist(Application.Path) = False Then
      strPath = Application.Path
    Endif
  Endif
  stx = GEFUtility.DokuProj(Application.Path)

  For int = 0 To stx.Max
    stxClass.Add(Split(stx[int], "\t")[1])
    stxMethod.Add(Split(stx[int], "\t")[2])
    stxCode.Add(Split(stx[int], "\t")[3])
    stxVars.Add(Split(stx[int], "\t")[4])
  Next

  int = stx.Count

  Return int

End

' Public Function ArrangeMethods()
'
'   Dim int As Integer
'   Dim strClassCurrent As String
'
'   If bolLoaded = False Then
'     trvMethods.Clear
'     strClassCurrent = ""
'     trvMethods.Add(Application.Name, Application.Name, Picture["icon:/16/linux"])
'     For int = 0 To stxMethod.Max
'       TreeIndoLoad(int)
'       Select inx.Count
'         Case 0
'           If strFilterText = "" Then
'             If trvMethods.Exist(strClass) = False Then
'               trvMethods.Add(strClass, strClass, Picture["icon:/16/add"], Application.Name)
'             Endif
'             trvMethods.Add(strClass & "." & strName, strName, Picture["icon:/16/apply"], strClass)
'           Else
'             'skip
'           Endif
'
'         Case Else
'           If inx.Find(int) > -1 Then
'             If trvMethods.Exist(strClass) = False Then
'               trvMethods.Add(strClass, strClass, Picture["icon:/16/add"], Application.Name)
'             Endif
'             trvMethods.Add(strClass & "." & strName, strName, Picture["icon:/16/apply"], strClass)
'           Endif
'       End Select
'       strClassCurrent = strClass
'     Next
'     trvMethods[Application.Name].Expanded = True
'     txeCode.Text = ""
'   Endif
'
' End

Public Sub TreeIndoLoad(int As Integer)

  'Dim stxMethod As New String[]

  strClass = stxClass[int]

  strFast = Split(stxMethod[int], "\n")[0]
  stxFast.Add(strFast)

  strMod = Split(stxMethod[int], "\n")[1]
  stxMod.add(strMod)

  strScope = Split(stxMethod[int], "\n")[2]
  stxScope.Add(strScope)

  strType = Split(stxMethod[int], "\n")[3]
  stxType.Add(strType)

  strName = Split(stxMethod[int], "\n")[4]
  stxName.Add(strName)

  strArgs = Split(stxMethod[int], "\n")[5]
  stxArgs.Add(strArgs)

  strRetn = Split(stxMethod[int], "\n")[6]
  stxRetn.Add(strRetn)

  strDesc = Split(stxMethod[int], "\n")[7]
  stxDesc.Add(strDesc)

  strCode = stxCode[int]

End

' Public Sub trvMethods_Select()
'
'   Dim strMeClass As String
'   Dim strMeName As String
'   Dim intKeyCls As Integer
'   Dim intKeyMet As Integer
'   Dim inxKey As New Integer[]
'   Dim intKey As Integer
'
'   If InStr(trvMethods.Key, ".") > 0 Then
'     strMeClass = Split(trvMethods.Key, ".")[0]
'     strMeName = Split(trvMethods.Key, ".")[1] ' NOmbre del método
'
'     For intKeyMet = 0 To stxName.Max
'       If stxName[intKeyMet] = strMeName Then
'         inxKey.Add(intKeyMet)
'       Endif
'     Next
'     Wait 0.01
'
'     For intKeyCls = 0 To inxKey.Max
'       If stxClass[inxKey[intKeyCls]] = strMeClass Then
'         intKey = inxKey[intKeyCls]
'         Break
'       Endif
'     Next
'
'     txeCode.Text = stxCode[intKey]
'     lblInformation.Text = stxDesc[intKey]
'     lblInformation.Refresh
'   Endif
'
' End

' Public Sub EditorTheme(txe As TextEditor)
'
'   Dim stxTheme As New String[]
'   Dim int As Integer
'   Dim stxKey As New String[]
'   Dim stxVal As New String[]
'
'   '  Dim strBack As String
'   ' Dim strFront As String
'   Dim strTheme As String
'
'   strTheme = GEFStarter.stxProgVal[15]
'
'   If strTheme = "" Then
'     strTheme = "gef"
'   Endif
'
'   If Exist("./theme/" & strTheme) Then
'     stxTheme = GEFUtility.FileLoad("./theme/" & strTheme)
'     For int = 0 To stxTheme.Max
'
'       Select stxTheme[int]
'         Case "[Theme]", ""
'           'skip
'         Case Else
'           stxKey.Add(Split(stxTheme[int], "=")[0])
'           stxVal.Add(Replace(Split(stxTheme[int], "=")[1], "\"", ""))
'       End Select
'     Next
'
'   Endif
'
' End
'
' Public Sub Search_Change()
'
'   Dim bto As ButtonBox
'
'   bto = Last
'   strFilterText = bto.Text
'   Print bto.Tag & ":" & bto.Text
'   Strainer(bto.Tag, bto.Text)
'
' End

' Public Sub Search_Click()
'
'   Dim bto As ButtonBox
'
'   bto = Last
'   strFilterText = bto.Text
'   Print bto.Tag & ":" & bto.Text
'   Strainer(bto.Tag, bto.Text)
'
' End

' Public Sub Strainer(strMode As String, strText As String) '' Filtrado de métodos y codigo.
'
'   Dim intS As Integer
'   Dim intQty As Integer
'
'   inx.Clear
'
'   Select strMode
'     Case "method"
'       For intS = 0 To stxName.Max
'         If InStr(String.LCase(stxName[intS]), String.LCase(strText))
'           inx.Add(intS)
'         Endif
'       Next
'     Case "code"
'       For intS = 0 To stxCode.Max
'         If InStr(String.LCase(stxCode[intS]), String.LCase(strText))
'           inx.Add(intS)
'         Endif
'       Next
'   End Select
'
'   intQty = inx.Count
'   If intQty > 0 Then
'     Print "Cantidad de coincidencias" & ": " & CStr(intQty)
'     ArrangeMethods()
'   Else
'     Print "No hay coincidencias"
'     ArrangeMethods()
'     'Message.Info(("La busqueda no ha devuelto coincidencias."))
'   Endif
'
' End

Public Sub tobDevHelp_Click()

  Dim stx As New String[]
  Dim int As Integer
  Dim strNode As String
  Dim strNodeCurrent As String
  Dim strChild As String
  Dim strData As String
  Dim strOutput As String
  Dim intColor As Integer
  Dim stxColor As New String[]
  Dim strFilePdf As String

  strOutput = User.Home &/ "tmp.tex"
  strFilePdf = User.Home &/ "tmp.pdf"

  stx = GEFUtility.RelationProj(stxClass, stxName, stxCode)

  stxColor.Add("blue!30")
  stxColor.Add("green!40")
  stxColor.Add("red!30")
  stxColor.Add("purple!50")
  stxColor.Add("teal!40")
  stxColor.Add("yellow!30")

  If stx.Count > 0 Then
    'strData &= "\\documentclass{article}\n"
    strData &= "\\documentclass[landscape]{article}\n"
    strData &= "\\usepackage[utf8]{inputenc}\n"
    strData &= "\\usepackage{tikz}\n"
    strData &= "\\usepackage[a2paper]{geometry}\n"
    strData &= "\\usetikzlibrary{mindmap}\n"
    strData &= "\\pagestyle{empty}\n"
    strData &= "\\begin{document}\n"
    strData &= "\\begin{tikzpicture}[mindmap, grow cyclic, every node/.style=concept, concept color=orange!40,\n"
    strData &= "    level 1/.append style={level distance=8cm,sibling angle=25},\n"
    strData &= "    level 2/.append style={level distance=6cm,sibling angle=25}]\n"
    strData &= "\\node{" & Application.Name & "}\n"

    For int = 0 To stx.Max
      strNode = Split(stx[int], "=")[0]
      strNode = Replace(strNode, "_", "")

      strChild = Split(stx[int], "=")[1]
      strChild = Replace(strChild, "_", "")

      If strNode <> strNodeCurrent Then
        Select int
          Case 0
            'skip
          Case stx.Max
            strData &= "}\n"
          Case Else
            strData &= "}\n"

        End Select
        strData &= "  child [concept color=" & stxColor[intColor] & "] { node {" & strNode & "}\n"
        strData &= "    child { node {" & strChild & "}}\n"
        If intColor < 5 Then
          Inc intColor
        Else
          intColor = 0
        Endif
        strNodeCurrent = strNode

      Else
        strData &= "    child { node {" & strChild & "}}\n"
      Endif
      Select int
        Case stx.Max
          strData &= "}\n"
      End Select

    Next

    strData &= ";\n"
    strData &= "\\end{tikzpicture}\n"
    strData &= "\\end{document}"

    File.Save(strOutput, strData)
    Wait 1
    If Exist(strOutput) = True Then
      If GEFBatch.LATEXPDF(strOutput, "pdflatex") = strFilePdf Then
        Desktop.Open(strFilePdf)
      Endif
    Endif
    Desktop.Open(strOutput)
  Endif

End

Public Sub tobGEFCodeExplorer_Click()

  GEFCodeExplorer.Run()

End

Public Sub mnuExit_Click()

  Me.Close

End

' /// Solapa de datos ///////////////////////////////////////////////////////////////////

Public Function ShowData() ''Muestra los datos de la base de datos, suas vistas y consultas SQL que den un resultado en el gridview y en el Treeview

  Dim intTree As Integer
  Dim strText As String
  Dim strKey As String
  Dim picTab As Picture
  '
  Dim strRoot As String
  Dim strRootAlt As String

  If GEFStarter.stxViews.Count > 0 Then
    strRoot = GEFStarter.stxProgVal[2] ' Nombre de la conexion a BBDD
    strRootAlt = GEFStarter.stxProgVal[17] ' Nombre alternativo de la aplicación
    picTab = Picture["icon:/16/sun"]

    trvData.Add(strRoot, strRootAlt, Picture["icon:/16/sun"])
    For intTree = 0 To GEFStarter.stxVTitles.Max
      strKey = GEFStarter.stxVTitles[intTree][0]
      strText = GEFStarter.stxVTitles[intTree][1]
      picTab = Picture[GEFStarter.stxVTitles[intTree][2]]
      trvData.Add(strKey, strText, picTab, strRoot)
    Next
  Endif

  'grwData

End

Public Sub trvData_Select()

  Dim intFld As Integer
  Dim strKeyText As String
  Dim intx As Integer

  strKeyText = trvData.Current.Key
  If InStr(strKeyText, "view_") > 0 Then
    GEFStarter.stxProgVal[20] = Replace(strKeyText, "view_", "")
  Else
    GEFStarter.stxProgVal[20] = ""
  Endif
  Print "Key: " & GEFStarter.stxProgVal[20]
  If strKeyText <> GEFStarter.stxProgVal[2] Then
    GEFStarter.strViewNameSqlCurrent = strKeyText
    GEFStarter.stxFieldsTableCurrent.Clear
    GEFStarter.stxFieldsViewCurrent.Clear

    For intFld = 0 To GEFStarter.stxViewFields.Max
      If GEFStarter.stxViewFields[intFld][0] = strKeyText Then
        GEFStarter.stxFieldsViewCurrent.Add(GEFStarter.stxViewFields[intFld][1])
      Endif
    Next

    For intFld = 0 To GEFStarter.stxTableFields.Max
      If GEFStarter.stxTableFields[intFld][0] = GEFStarter.stxProgVal[20] Then
        GEFStarter.stxFieldsTableCurrent.Add(GEFStarter.stxTableFields[intFld][1])
      Endif
    Next

    strGridState = "loading"

    If UpdateGrid() = 1 Then
      If strGridState = "loaded" Then
        'cmdArrangeButtonOrders(GEFStarter.stxFieldsViewCurrent)
        'cmdArrangeButtonOrders(GEFStarter.stxFieldsToShow)
        'cmdArrangeButtonFilters()

        For intx = 0 To GEFStarter.stxVTitles.Max
          If GEFStarter.stxVTitles[intx][0] = GEFStarter.strViewNameSqlCurrent Then
            GEFStarter.strViewNameHumanCurrent = GEFStarter.stxVTitles[intx][1]

          Endif
        Next
        tobImport.Enabled = True
        tobImport.Tooltip = ("Importar") & " " & GEFStarter.strViewNameHumanCurrent

        tobExport.Enabled = True
        tobExport.Tooltip = ("Exportar") & " " & GEFStarter.strViewNameHumanCurrent
      Endif
    Endif
  Endif

End

Public Function UpdateGrid() As Integer

  Dim intFld As Integer
  Dim int As Integer
  Dim intQ As Integer
  Dim intColumns As Integer
  Dim strFilterType As String
  Dim strFilterValue As String

  'grwData.Header = 1 ' Muestra solo el encabezado
  grwData.ScrollBar = 3 ' Muestra los scrol vertical y horizontal
  grwData.Mode = Select.Multiple

  'grwHeader.ScrollBar =
  grwHeader.Mode = Select.None
  grwFilter.Mode = Select.None
  grwFilter.Grid = False

  GEFStarter.strSQLCurrent = GEFData.SqlMake(GEFStarter.strViewNameSqlCurrent, GEFStarter.stxViewFields)
  'Última SQL
  GEFStarter.stxProgVal[18] = GEFStarter.strSQLCurrent

  GEFStarter.resProgram = GEFStarter.conProgram.Exec(GEFStarter.strSQLCurrent)

  grwHeader.Rows.Count = 0
  grwFilter.Rows.Count = 0
  grwData.Rows.Count = 0

  GEFStarter.stxFieldsToShow.Clear

  If GEFStarter.resProgram.Available Then
    If GEFStarter.resProgram.Count > 0 Then
      grwData.Rows.Count = 0
      grwHeader.Rows.Count = 0
      grwFilter.Rows.Count = 0
      intColumns = 0

      For intQ = 0 To GEFStarter.stxFTitles.Max

        If GEFStarter.stxFTitles[intQ][0] = GEFStarter.strViewNameSqlCurrent Then
          Inc intColumns
          GEFStarter.stxFieldsToShow.Add(GEFStarter.stxFTitles[intQ][1])
        Endif
      Next

      grwData.Rows.Count = GEFStarter.resProgram.Count
      grwHeader.Rows.Count = 1 'GEFStarter.resProgram.Count
      grwFilter.Rows.Count = 1
    Endif
  Endif

  grwData.Columns.Count = intColumns
  grwHeader.Columns.Count = intColumns
  grwFilter.Columns.Count = intColumns
  grwHeader.Rows.Height = 28
  grwFilter.Rows.Height = 28

  strGridState = "loading"
  For int = 0 To GEFStarter.stxViewFields.Max
    If GEFStarter.stxViewFields[int][0] = GEFStarter.strViewNameSqlCurrent Then
      intFld = GEFStarter.stxFieldsToShow.Find(GEFStarter.stxViewFields[int][1])
      If intFld > -1 Then

        Select GEFStarter.stxViewFields[int][6]
          Case "", "0", 0
            GEFStarter.stxViewFields[int][6] = 75
        End Select

        'grwData.Columns[intFld].Title = GEFStarter.stxViewFields[int][10]
        grwHeader.Columns[intFld].Width = GEFStarter.stxViewFields[int][6]
        grwFilter.Columns[intFld].Width = GEFStarter.stxViewFields[int][6]
        grwData.Columns[intFld].Width = GEFStarter.stxViewFields[int][6]

        grwHeader[0, intFld].Text = GEFStarter.stxViewFields[int][10]

        strFilterType = GEFStarter.stxViewFields[int][4]
        strFilterValue = GEFStarter.stxViewFields[int][5]

        grwFilter[0, intFld].Text = strFilterType & ":" & strFilterValue

        Select GEFStarter.stxViewFields[int][3]
          Case "asc"
            grwHeader[0, intFld].Picture = Picture["icon:/16/up"]
          Case "desc"
            grwHeader[0, intFld].Picture = Picture["icon:/16/down"]
          Case "", Null
            grwHeader[0, intFld].Picture = Picture["icon:/16/right"]
        End Select

        'Select
        '   grwHeader[0, intFld].Picture = Picture["icon:/16/right"]

        'grwData[0, intFld].Text = GEFStarter.stxViewFields[int][10]

        'grwData[0, intFld].Width = GEFStarter.stxViewFields[int][6]
        'grwData[0, intFld].Picture = Picture["icon:/16/bottom"]
        'grwData[-1, intFld].Picture = Picture["icon:/16/add"]

      Endif
    Endif
  Next
  If strGridState = "loading" Then
    strGridState = "loaded"
  Endif

  lblInformation.Text = GEFStarter.stxProgVal[18]
  Print GEFStarter.strSQLCurrent

  Return 1

End

Public Sub grwData_Data(Row As Integer, Column As Integer)

  Dim strPicPath As String
  Dim strKey As String
  Dim strPicDir As String
  Dim strPicAlt As String

  If GEFStarter.resProgram.Available Then

    GEFStarter.resProgram.MoveTo(Row)

    Select Column
      Case 0
        strKey = GEFStarter.resProgram[GEFStarter.stxFieldsToShow[0]]
        strPicDir = GEFStarter.stxProgVal[19] ' Directorio de imagenes.

        If Exist(strPicDir) = True Then
          strPicPath = strPicDir &/ GEFStarter.stxProgVal[20] &/ strKey & ".png"
          strPicAlt = strPicDir &/ GEFStarter.stxProgVal[20] &/ strKey & ".jpeg"

          'grwData.Data.Picture = Image.Load(strPicPath).Stretch(22, 22).Picture
          If Exist(strPicPath) = True Then
            'grwData.Data.Text = GEFStarter.resProgram[GEFStarter.resProgram.Fields[Column].Name]
            Try grwData.Data.Picture = Image.Load(strPicPath).Stretch(22, 22).Picture
            If Error Then Print "Error" '(("La imagen ha producudo un error") & " " & strPicPath))

          Else
            If Exist(strPicAlt) = True Then
              'grwData.Data.Text = GEFStarter.resProgram[GEFStarter.resProgram.Fields[Column].Name]
              grwData.Data.Picture = Image.Load(strPicAlt).Stretch(22, 22).Picture
            Else
              grwData.Data.Picture = Image.Load("./blank-22.png").Stretch(22, 22).Picture
            Endif
          Endif
        Endif
        'grwData.Data.Picture = Image.Load(strPicPath).Stretch(22, 22).Picture
        grwData.Data.Text = GEFStarter.resProgram[GEFStarter.stxFieldsToShow[Column]]
      Case Else
        grwData.Data.Text = GEFStarter.resProgram[GEFStarter.stxFieldsToShow[Column]]
    End Select

  Else
    grwData.Data.Text = ""

  Endif

End

Public Sub grwHeader_Data(Row As Integer, Column As Integer)

  Dim strPicPath As String
  Dim strKey As String
  Dim strPicDir As String
  Dim strPicAlt As String

  If GEFStarter.resProgram.Available Then

    GEFStarter.resProgram.MoveTo(Row)

    Select Row
      Case 0
        'tbwData.Columns[0].
        'tbwData[, Column].Picture["icon:/16/add"]
    End Select

    Select Column
      Case 0
        Select Row
          Case 0
            'tbwData[-1, Column].Picture["icon:/16/add"]
          Case Else
            strKey = GEFStarter.resProgram[GEFStarter.stxFieldsToShow[0]]
            strPicDir = GEFStarter.stxProgVal[19] ' Directorio de imagenes.
        End Select

        If Exist(strPicDir) = True Then
          strPicPath = strPicDir &/ GEFStarter.stxProgVal[20] &/ strKey & ".png"
          strPicAlt = strPicDir &/ GEFStarter.stxProgVal[20] &/ strKey & ".jpeg"

          If Exist(strPicPath) = True Then
            Try grwHeader.Data.Picture = Image.Load(strPicPath).Stretch(22, 22).Picture
            If Error Then Print "Error" '(("La imagen ha producudo un error") & " " & strPicPath))

          Else
            If Exist(strPicAlt) = True Then
              'grwData.Data.Text = GEFStarter.resProgram[GEFStarter.resProgram.Fields[Column].Name]
              grwHeader.Data.Picture = Image.Load(strPicAlt).Stretch(22, 22).Picture
            Else
              grwHeader.Data.Picture = Image.Load("./blank-22.png").Stretch(22, 22).Picture
            Endif
          Endif
        Endif
        'grwData.Data.Picture = Image.Load(strPicPath).Stretch(22, 22).Picture
        grwHeader.Data.Text = GEFStarter.resProgram[GEFStarter.stxFieldsToShow[Column]]
      Case Else
        grwHeader.Data.Text = GEFStarter.resProgram[GEFStarter.stxFieldsToShow[Column]]

    End Select

  Else
    grwHeader.Data.Text = ""

  Endif

End

Public Sub tobNewRecord_Click()

  cmdRecordNew()

End

Public Sub tobDeleteRecord_Click()

  cmdRecordDelete()

End

Public Sub tobEditRecord_Click()

  cmdRecordEdit()

End

' Public Sub grwData_Click()

' Dim intR As Integer
'
' Dim int As Integer
' Dim strFieldName As String
'
' tobUtilities.Enabled = False
'
' Select grwData.Row
'   Case -1
'
'   Case 0
'     strFieldName = GEFStarter.stxFieldsViewCurrent[grwData.Column]
'
'     For int = 0 To GEFStarter.stxViewFields.Max
'       If GEFStarter.stxViewFields[int][0] = GEFStarter.strViewNameSqlCurrent Then
'         If GEFStarter.stxViewFields[int][1] = strFieldName Then
'
'           Select grwData[0, grwData.Column].Picture
'             Case Null
'               grwData[0, grwData.Column].Picture = Picture["icon:/16/sort-ascent"]
'               GEFStarter.stxViewFields[int][3] = "asc"
'
'             Case Picture["icon:/16/sort-ascent"]
'               grwData[0, grwData.Column].Picture = Picture["icon:/16/sort-descent"]
'               GEFStarter.stxViewFields[int][3] = "desc"
'
'             Case Picture["icon:/16/sort-descent"]
'               grwData[0, grwData.Column].Picture = Null
'               GEFStarter.stxViewFields[int][3] = ""
'           End Select
'         Endif
'       Endif
'     Next
'
'     UpdateGrid()
'
'   Case Else
'     Print "Click en fila: " & CStr(grwData.Row) & " " & grwData[grwData.Row, 0].Text
'     Select GEFStarter.strViewNameSqlCurrent
'       Case "view_owners", "view_suppliers"
'
'         For intR = 0 To grwData.Rows.Max
'           If grwData.Rows[intR].Selected = True Then
'             tobUtilities.Enabled = True
'             Break
'           Endif
'         Next
'
'     End Select
'
' End Select

' End

Public Sub grwData_ColumnResize(Column As Integer)

  Dim intY As Integer

  grwHeader.Columns[Column].Width = grwData.Columns[Column].Width

  Select GEFStarter.stxViews.Find(GEFStarter.strViewNameSqlCurrent)
    Case -1
      Message.Info(("La vista que intenta guardar no esta configurada adecuadamente.") & gb.NewLine & ("Contacte al desarrollador del programa para reportar el error."))
    Case Else
      For intY = 0 To GEFStarter.stxViewFields.Max
        If GEFStarter.stxViewFields[intY][0] = GEFStarter.strViewNameSqlCurrent Then
          If GEFStarter.stxViewFields[intY][1] = GEFStarter.stxFieldsViewCurrent[Column] Then
            GEFStarter.stxViewFields[intY][6] = CStr(grwData.Columns[Column].Width)
          Endif
        Endif

      Next

      Wait 0.01

      If strGridState = "loaded" Then
        'cmdArrangeButtonOrders(GEFStarter.stxFieldsToShow)
        'cmdArrangeButtonFilters()
      Endif

  End Select

End

Public Sub cmdArrangeButtonFilters()

  Dim btnFilter As Button

  pnlFilter.Children.Clear
  pnlFilter.Arrangement = Arrange.Fill

  btnFilter = New Button(pnlFilter) As "GFilterType"

  With btnFilter
    .Name = "btnFilter~" & "OnWorking" '& stxButtonsFields[intA]
    .Border = False
    .Picture = Picture["icon:/16/filter"]
    .Text = ("Los filtros todavía no están implementados")
    .Tag = 0
    .Expand = True
    .Width = pnlFilter.Width
    .Height = pnlFilter.Height
  End With

End

Public Sub cmdArrangeButtonOrders(stxButtonsFields As String[])

  Dim pnlOrder As Panel
  Dim btnOrder As Button
  Dim intView As Integer
  Dim intA, intB, intXbtn As Integer
  Dim stxFieldInfoTmp As New String[]

  stxFieldInfoTmp.Clear
  pnlDataOrder.Children.Clear
  For intView = 0 To GEFStarter.stxViewFields.Max
    If GEFStarter.stxViewFields[intView][0] = GEFStarter.strViewNameSqlCurrent Then
      intA = stxButtonsFields.Find(GEFStarter.stxViewFields[intView][1])

      'If intA > -1 Then

      ' Busco el campo en la lista
      If intA > -1 Then
        pnlOrder = New Panel(pnlDataOrder)
        With pnlOrder
          .Name = "pnlOrder~" & stxButtonsFields[intA]
          .Tag = intA
          Print "intA=" & CStr(intA)
          .Height = pnlDataOrder.Height - 2
          .Width = grwData.Columns[intA].Width
          Select intA
            Case 0
              intXbtn = 0
            Case Else
              intXbtn = 0
              For intB = 0 To intA - 1
                intXbtn = intXbtn + grwData.Columns[intB].Width
              Next
          End Select
          .X = intXbtn
          .Y = 0
          .Arrangement = Arrange.Vertical
        End With
        btnOrder = New Button(pnlOrder) As "GOrderType"
        With btnOrder
          .Name = "btnOrder~" & stxButtonsFields[intA]
          .Border = True
          .Tag = intA
          Select GEFStarter.stxViewFields[intView][3] ' Tipo de orden
            Case "asc"
              .Picture = Picture["icon:/16/up"]
            Case "desc"
              .Picture = Picture["icon:/16/down"]
            Case ""
              '.Picture = Null
              .Picture = Picture["icon:/16/right"]
          End Select
          .Expand = True
          .Width = pnlOrder.Height
          .Height = pnlOrder.Height
        End With
      Endif
    Endif
    '  Endif
  Next

End

Public Sub GOrderType_Click()

  Dim btn As Button
  Dim int As Integer
  Dim intColumn As Integer
  Dim strFieldName As String

  btn = Last
  intColumn = CInt(btn.Tag)
  strFieldName = GEFStarter.stxFieldsViewCurrent[intColumn]

  For int = 0 To GEFStarter.stxViewFields.Max
    If GEFStarter.stxViewFields[int][0] = GEFStarter.strViewNameSqlCurrent Then
      If GEFStarter.stxViewFields[int][1] = strFieldName Then

        Select btn.Picture
          Case Picture["icon:/16/right"]
            btn.Picture = Picture["icon:/16/up"]
            GEFStarter.stxViewFields[int][3] = "asc"

          Case Picture["icon:/16/sort-ascent"]
            btn.Picture = Picture["icon:/16/down"]
            GEFStarter.stxViewFields[int][3] = "desc"

          Case Picture["icon:/16/sort-descent"]
            btn.Picture = Picture["icon:/16/right"]
            GEFStarter.stxViewFields[int][3] = ""
        End Select
      Endif
    Endif
  Next

  UpdateGrid()

End

Public Sub grwData_Scroll()

  pnlFilter.ScrollX = grwData.ScrollX
  grwHeader.ScrollX = grwData.ScrollX
  grwFilter.ScrollX = grwData.ScrollX

End

Public Sub grwData_DblClick()

  Print "Has hecho clic en la fila: " & grwData.Row

  Select grwData.Row
    Case 0
      '
    Case Else
      cmdRecordEdit()
  End Select

End

' / Trabajando con registros ////////////////////////

Public Sub cmdRecordNew()

  Dim strTable As String

  strTable = Replace(GEFStarter.strViewNameSqlCurrent, "view_", "")
  GEFDataEdit.RunEditor(GEFStarter.conProgram, strTable)

End

Public Sub cmdRecordEdit()

  Dim intKey As Integer
  Dim strTable As String

  strTable = Replace(GEFStarter.strViewNameSqlCurrent, "view_", "")

  If grwData.Current Then
    intKey = CInt(grwData[grwData.Row, 0].Text)
    GEFDataEdit.RunEditor(GEFStarter.conProgram, strTable, intKey)
  Else
    Message.Info("Debe seleccionar un registro de la lista")
  Endif

End

Public Sub cmdRecordDelete()

  Dim intKey As Integer
  Dim intCount As Integer
  Dim intOk As Integer
  Dim intR As Integer
  Dim strTable As String

  strTable = Replace(GEFStarter.strViewNameSqlCurrent, "view_", "")

  For intR = 0 To grwData.Rows.Max
    If grwData.Rows[intR].Selected = True Then
      Inc intCount
      intKey = CInt(grwData[intR, 0].Text)
      If GEFData.RecordDelete(GEFStarter.conProgram, strTable, GEFStarter.stxTableFields, intKey) = -1 Then
        Inc intOk
      Endif
    Endif
  Next

  If intCount > 0 Then
    If intOk = intCount Then
      UpdateGrid()
    Else
      Select intOk
        Case 0
          Message.Info("No se pudo borrar ningun registro")
        Case Else
          Message.Info("Hay registros que no se pudieron borrar")
      End Select
    Endif
    UpdateGrid()
  Else
    Message.Info("Debe seleccionar registros de la lista")
  Endif

End

Public Sub Form_Close()

  If GEFStarter.Terminator() = 1 Then
    Me.Close
  Else
    Message.Error("No se han podido guardar los parametros del programa")
  Endif

End

' Public Sub Form_Activate()
'
'   Select GEFStarter.stxProgVal[16]
'     Case "True", "T"
'       TabPanel1[0].Visible = True
'     Case Else
'       TabPanel1[0].Visible = False
'   End Select
'
' End

Public Sub tobUtilities_Click()

  GEFFunctions.Show()

End

Public Sub grwData_KeyPress()

  If Key.Code = 16777220 Then
    Print "Form_KeyPress ENTER"
    cmdRecordEdit()
  Endif

End

' Public Sub grwData_MouseDown()
'
'   Dim intR As Integer
'   Dim int As Integer
'   Dim strFieldName As String
'
'   Select Mouse.Button
'     Case 1
'
'       tobUtilities.Enabled = False
'
'       Select grwData.Row
'         Case -1
'           '
'
'         Case 0
'           strFieldName = GEFStarter.stxFieldsViewCurrent[grwData.Column]
'
'           For int = 0 To GEFStarter.stxViewFields.Max
'             If GEFStarter.stxViewFields[int][0] = GEFStarter.strViewNameSqlCurrent Then
'               If GEFStarter.stxViewFields[int][1] = strFieldName Then
'
'                 Select grwData[0, grwData.Column].Picture
'                   Case Null
'                     grwData[0, grwData.Column].Picture = Picture["icon:/16/sort-ascent"]
'                     GEFStarter.stxViewFields[int][3] = "asc"
'
'                   Case Picture["icon:/16/sort-ascent"]
'                     grwData[0, grwData.Column].Picture = Picture["icon:/16/sort-descent"]
'                     GEFStarter.stxViewFields[int][3] = "desc"
'
'                   Case Picture["icon:/16/sort-descent"]
'                     grwData[0, grwData.Column].Picture = Null
'                     GEFStarter.stxViewFields[int][3] = ""
'                 End Select
'               Endif
'             Endif
'           Next
'
'           UpdateGrid()
'
'         Case Else
'           Print "Click en fila: " & CStr(grwData.Row) & " " & grwData[grwData.Row, 0].Text
'           Select GEFStarter.strViewNameSqlCurrent
'             Case "view_owners", "view_suppliers"
'
'               For intR = 0 To grwData.Rows.Max
'                 If grwData.Rows[intR].Selected = True Then
'                   tobUtilities.Enabled = True
'                   Break
'                 Endif
'               Next
'
'           End Select
'
'       End Select
'
'     Case 2
'       Select grwData.Row
'         Case 0
'           Message("x")
'       End Select
'
'   End Select
'
' End

Public Sub grwHeader_MouseDown()

  Dim intR As Integer
  Dim int As Integer
  Dim strFieldName As String

  Select Mouse.Button
    Case 1

      tobUtilities.Enabled = False

      Select grwHeader.Row
        Case -1
          '

        Case 0
          strFieldName = GEFStarter.stxFieldsViewCurrent[grwHeader.Column]

          For int = 0 To GEFStarter.stxViewFields.Max
            If GEFStarter.stxViewFields[int][0] = GEFStarter.strViewNameSqlCurrent Then
              If GEFStarter.stxViewFields[int][1] = strFieldName Then

                'Select grwHeader[0, grwHeader.Column].Picture.Image.Data
                Select GEFStarter.stxViewFields[int][3]
                    ' Case Null
                    '   grwHeader[0, grwHeader.Column].Picture = Picture["icon:/16/up"]
                    '   GEFStarter.stxViewFields[int][3] = "asc"
                  Case "" 'Picture["icon:/16/right"].Image.Data
                    grwHeader[0, grwHeader.Column].Picture = Picture["icon:/16/up"]
                    GEFStarter.stxViewFields[int][3] = "asc"

                  Case "asc" 'Picture["icon:/16/sort-ascent"].Image.Data
                    grwHeader[0, grwHeader.Column].Picture = Picture["icon:/16/down"]
                    GEFStarter.stxViewFields[int][3] = "desc"

                  Case "desc" 'Picture["icon:/16/sort-descent"].Image.Data
                    grwHeader[0, grwHeader.Column].Picture = Picture["icon:/16/right"]
                    GEFStarter.stxViewFields[int][3] = ""
                End Select
              Endif
            Endif
          Next

          UpdateGrid()

        Case Else
          Print "Click en fila: " & CStr(grwHeader.Row) & " " & grwHeader[grwHeader.Row, 0].Text
          Select GEFStarter.strViewNameSqlCurrent
            Case "view_owners", "view_suppliers"

              For intR = 0 To grwHeader.Rows.Max
                If grwHeader.Rows[intR].Selected = True Then
                  tobUtilities.Enabled = True
                  Break
                Endif
              Next

          End Select

      End Select

    Case 2
      Select grwHeader.Row
        Case 0
          'Este es para abrir el dialogo de los filtros
          Message("x")
      End Select

  End Select

End

Public Sub grwData_MouseMove()

  Dim intVpos As Integer
  Dim intHpos As Integer
  Dim int As Integer
  Dim intCursor As Integer

  intVpos = Mouse.ScreenY - grwData.ScreenY
  intHpos = Mouse.ScreenX - grwData.ScreenX

  bolResize = False
  grwData.Mouse = Mouse.Default

  If intVpos < 24 Then

    'Print grwData[0, 0].Width & ":" & intHpos
    intCursor = 0
    For int = 0 To grwData.Columns.Max
      If grwData.Columns[int].Width > 0 Then
        intCursor = intCursor + grwData.Columns[int].Width
        Select Abs(intCursor - intHpos)
          Case 0, 1, 2, 3
            Print "Columna " & int
            grwData.Mouse = Mouse.SizeE
            intColumn = int
            bolResize = True
            Break
        End Select

      Endif
    Next

  Endif

End

' Public Sub grwData_Click()
'
'   Dim intXinit As Integer
'
'   If bolResize = True Then
'     intXinit = Mouse.ScreenX
'   Endif
'
' End

Public Sub tobResizeColumns_Click()

  Dim int As Integer
  Dim intWi As Integer

  ' For int = 0 To grwData.Columns.Max
  '   If grwData.Columns[int].Width > 0 Then
  '     If String.Len(grwData[0, int].Text) > 0 Then
  '       grwData.Columns[int].Width = String.Len(grwData[0, int].Text) * 7 + 14
  '     Else
  '       grwData.Columns[int].Width = 50
  '     Endif
  '   Endif
  ' Next
  For int = 0 To grwHeader.Columns.Max
    If grwHeader.Columns[int].Width > 0 Then
      If String.Len(grwHeader[0, int].Text) > 0 Then
        intWi = String.Len(grwHeader[0, int].Text) * 7 + 14 + 16
        grwData.Columns[int].Width = intWi
        grwHeader.Columns[int].Width = intWi
      Else
        grwData.Columns[int].Width = 50
        grwHeader.Columns[int].Width = 50
      Endif
    Endif
  Next

End

Public Sub grwData_MouseDrag()

  Print Mouse.X

End

Public Sub Panel3_MouseDown()

End

Public Sub tobFilters_MouseDown()

  Print tobFilters.Value

  Select tobFilters.Value

    Case True
      'tobFilters.Value = False
      pnlFilter.Visible = False

    Case False
      'tobFilters.Value = True
      pnlFilter.Visible = True

  End Select

End
